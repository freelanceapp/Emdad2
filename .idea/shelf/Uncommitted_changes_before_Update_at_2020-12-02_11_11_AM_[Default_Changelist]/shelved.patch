Index: app/src/main/java/com/apps/emdad/activities_fragments/activity_chat/ChatActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.apps.emdad.activities_fragments.activity_chat;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.ProgressDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Paint;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.Rect;\r\nimport android.media.MediaRecorder;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.VibrationEffect;\r\nimport android.os.Vibrator;\r\nimport android.provider.MediaStore;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewTreeObserver;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.Toast;\r\n\r\nimport com.apps.emdad.R;\r\nimport com.apps.emdad.activities_fragments.activity_add_bill.AddBillActivity;\r\nimport com.apps.emdad.activities_fragments.activity_delegate_add_offer.DelegateAddOfferActivity;\r\nimport com.apps.emdad.activities_fragments.activity_driver_update_location.DriverUpdateLocationActivity;\r\nimport com.apps.emdad.activities_fragments.activity_follow_order.FollowOrderActivity;\r\nimport com.apps.emdad.activities_fragments.activity_map_show_location.MapShowLocationActivity;\r\nimport com.apps.emdad.activities_fragments.activity_resend_order.ResendOrderTextActivity;\r\nimport com.apps.emdad.activities_fragments.activity_setting.SettingsActivity;\r\nimport com.apps.emdad.activities_fragments.activity_sign_up_delegate.SignUpDelegateActivity;\r\nimport com.apps.emdad.adapters.ChatActionAdapter;\r\nimport com.apps.emdad.adapters.ChatAdapter;\r\nimport com.apps.emdad.adapters.OffersAdapter;\r\nimport com.apps.emdad.adapters.RateReasonAdapter;\r\nimport com.apps.emdad.databinding.ActivityChatBinding;\r\nimport com.apps.emdad.language.Language;\r\nimport com.apps.emdad.models.BalanceModel;\r\nimport com.apps.emdad.models.ChatActionModel;\r\nimport com.apps.emdad.models.DefaultSettings;\r\nimport com.apps.emdad.models.FromToLocationModel;\r\nimport com.apps.emdad.models.MessageDataModel;\r\nimport com.apps.emdad.models.MessageModel;\r\nimport com.apps.emdad.models.NotFireModel;\r\nimport com.apps.emdad.models.OffersDataModel;\r\nimport com.apps.emdad.models.OffersModel;\r\nimport com.apps.emdad.models.OrderModel;\r\nimport com.apps.emdad.models.OrdersDataModel;\r\nimport com.apps.emdad.models.RangeOfferModel;\r\nimport com.apps.emdad.models.RateModel;\r\nimport com.apps.emdad.models.RateReason;\r\nimport com.apps.emdad.models.SettingModel;\r\nimport com.apps.emdad.models.SingleMessageDataModel;\r\nimport com.apps.emdad.models.SingleOrderDataModel;\r\nimport com.apps.emdad.models.UserModel;\r\nimport com.apps.emdad.preferences.Preferences;\r\nimport com.apps.emdad.remote.Api;\r\nimport com.apps.emdad.share.Common;\r\nimport com.apps.emdad.tags.Tags;\r\nimport com.github.ybq.android.spinkit.sprite.Sprite;\r\nimport com.github.ybq.android.spinkit.style.DoubleBounce;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.maps.android.SphericalUtil;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.Subscribe;\r\nimport org.greenrobot.eventbus.ThreadMode;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport io.paperdb.Paper;\r\nimport okhttp3.ResponseBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class ChatActivity extends AppCompatActivity {\r\n    private ActivityChatBinding binding;\r\n    private final int IMG_REQ = 1;\r\n    private final int CAMERA_REQ = 2;\r\n    private final int MIC_REQ = 3;\r\n    private final String READ_PERM = Manifest.permission.READ_EXTERNAL_STORAGE;\r\n    private final String WRITE_PERM = Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n    private final String CAMERA_PERM = Manifest.permission.CAMERA;\r\n    private final String MIC_PERM = Manifest.permission.RECORD_AUDIO;\r\n    private long audio_total_seconds = 0;\r\n    private MediaRecorder recorder;\r\n    private String audio_path = \"\";\r\n    private Handler handler;\r\n    private Runnable runnable;\r\n    private Preferences preferences;\r\n    private UserModel userModel;\r\n    private int order_id;\r\n    private OrderModel orderModel;\r\n    private boolean isDataChanged = false;\r\n    private int offer_current_page = 1;\r\n    private boolean offer_isLoading = false;\r\n    private List<OffersModel> offersModelList;\r\n    private OffersAdapter offersAdapter;\r\n    private String currency = \"\";\r\n    private String lang;\r\n    private List<ChatActionModel> actionReasonList;\r\n    private ChatActionAdapter chatActionAdapter;\r\n    private ChatActionModel chatActionModel = null;\r\n    private OffersModel offersModel = null;\r\n    private int reasonType = 0;\r\n    private DefaultSettings defaultSettings;\r\n    private List<MessageModel> messageModelList;\r\n    private ChatAdapter adapter;\r\n    private boolean isNewMessage = false;\r\n    private boolean loadData = true;\r\n    private RateReasonAdapter rateReasonAdapter;\r\n    private RateModel rateModel;\r\n    private SettingModel settingModel;\r\n    private boolean isFromFireBase = false;\r\n\r\n    @Override\r\n    protected void attachBaseContext(Context newBase) {\r\n        Paper.init(newBase);\r\n        super.attachBaseContext(Language.updateResources(newBase, Paper.book().read(\"lang\", \"ar\")));\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_chat);\r\n        getDataFromIntent();\r\n        initView();\r\n    }\r\n\r\n    private void getDataFromIntent() {\r\n        Intent intent = getIntent();\r\n        order_id = intent.getIntExtra(\"order_id\", 0);\r\n\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void initView() {\r\n        messageModelList = new ArrayList<>();\r\n        actionReasonList = new ArrayList<>();\r\n        Paper.init(this);\r\n        lang = Paper.book().read(\"lang\", \"ar\");\r\n        offersModelList = new ArrayList<>();\r\n        preferences = Preferences.getInstance();\r\n        userModel = preferences.getUserData(this);\r\n        defaultSettings = preferences.getAppSetting(this);\r\n        if (defaultSettings==null){\r\n            defaultSettings = new DefaultSettings();\r\n        }\r\n        binding.setLang(lang);\r\n        currency = getString(R.string.sar);\r\n        if (userModel != null) {\r\n            currency = userModel.getUser().getCountry().getWord().getCurrency();\r\n        }\r\n        binding.recViewOffers.setLayoutManager(new LinearLayoutManager(this));\r\n        offersAdapter = new OffersAdapter(offersModelList, this, currency);\r\n        binding.recViewOffers.setAdapter(offersAdapter);\r\n        binding.recView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                if (dy > 0) {\r\n                    LinearLayoutManager manager = (LinearLayoutManager) binding.recView.getLayoutManager();\r\n                    int last_item_pos = manager.findLastCompletelyVisibleItemPosition();\r\n                    int total_items_count = binding.recView.getAdapter().getItemCount();\r\n                    if (last_item_pos == (total_items_count - 2) && !offer_isLoading) {\r\n                        int page = offer_current_page + 1;\r\n                        loadMoreOffer(page);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        binding.imageChooser.setOnClickListener(v -> {\r\n            if (binding.expandedLayout.isExpanded()) {\r\n                binding.expandedLayout.collapse(true);\r\n\r\n            } else {\r\n                binding.expandedLayout.expand(true);\r\n\r\n            }\r\n        });\r\n        binding.btnHide.setOnClickListener(v -> {\r\n            binding.expandedLayout.collapse(true);\r\n        });\r\n        binding.imgGallery.setOnClickListener(v -> {\r\n            checkGalleryPermission();\r\n\r\n        });\r\n        binding.imageCamera.setOnClickListener(v -> {\r\n            checkCameraPermission();\r\n        });\r\n        binding.imageRecord.setOnTouchListener((v, event) -> {\r\n            if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                if (isMicReady()) {\r\n                    createMediaRecorder();\r\n\r\n                } else {\r\n                    checkMicPermission();\r\n                }\r\n            } else if (event.getAction() == MotionEvent.ACTION_UP) {\r\n\r\n                if (isMicReady()) {\r\n                    try {\r\n                        recorder.stop();\r\n                        stopTimer();\r\n                        Log.e(\"ddd\",\"fff\");\r\n                        sendAttachment(audio_path, \"\",\"voice\");\r\n                    } catch (Exception e) {\r\n                        stopTimer();\r\n                        Log.e(\"error1\", e.getMessage() + \"___\");\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            return true;\r\n        });\r\n        binding.llBack.setOnClickListener(v -> onBackPressed());\r\n        binding.tvReadyDeliverOrder.setOnClickListener(v -> {\r\n            navigateToDriverAddOffer();\r\n        });\r\n        chatActionAdapter = new ChatActionAdapter(actionReasonList, this);\r\n        binding.recViewAction.setLayoutManager(new LinearLayoutManager(this));\r\n        binding.recViewAction.setAdapter(chatActionAdapter);\r\n        binding.btnActionOk.setOnClickListener(v ->\r\n        {\r\n            if (chatActionModel != null) {\r\n\r\n                switch (reasonType) {\r\n                    case 1:\r\n                        leaveOrder(chatActionModel);\r\n                        break;\r\n                    case 2:\r\n                        changeDriver(chatActionModel);\r\n                        break;\r\n                    case 3:\r\n                        if (chatActionModel.getAction().equals(\"سعر التوصيل مرتفع\")) {\r\n                            if (offersModel != null) {\r\n\r\n                                if (Double.parseDouble(offersModel.getOffer_value()) > Double.parseDouble(offersModel.getMin_offer())) {\r\n                                    clientRefuseOffer(offersModel, \"yes\");\r\n\r\n                                } else {\r\n                                    deleteOrder(chatActionModel);\r\n\r\n                                }\r\n\r\n                            } else {\r\n                                deleteOrder(chatActionModel);\r\n\r\n                            }\r\n\r\n                        } else if (chatActionModel.getAction().equals(\"لم اعد احتاج الطلب\") || chatActionModel.getAction().equals(\"سبب آخر\")) {\r\n                            deleteOrder(chatActionModel);\r\n\r\n                        } else {\r\n                            clientRefuseOffer(offersModel, \"no\");\r\n\r\n                        }\r\n                        break;\r\n                }\r\n\r\n\r\n                closeSheet();\r\n            }\r\n        });\r\n        binding.btnActionCancel.setOnClickListener(v ->\r\n        {\r\n            closeSheet();\r\n        });\r\n\r\n        binding.btnDriverCancel.setOnClickListener(v -> {\r\n            driverCancelOffer();\r\n        });\r\n        binding.btnDriverBack.setOnClickListener(v -> {\r\n            driverCancelOffer();\r\n        });\r\n        binding.tvLeaveOrder.setOnClickListener(v -> {\r\n            driverLeaveOrderActions();\r\n            closeDriverActionSheet();\r\n        });\r\n        binding.btnCancel.setOnClickListener(v ->\r\n                //clientCancelOrder()\r\n                deleteOrderActionBeforeDriverAcceptOrderActions(null)\r\n        );\r\n        binding.imageMore.setOnClickListener(v -> {\r\n            if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n                //changeDriverActions();\r\n\r\n                deleteOrderActions(null);\r\n            } else {\r\n                openDriverActionSheet();\r\n            }\r\n\r\n        });\r\n        binding.btnDriverActionCancel.setOnClickListener(v -> closeDriverActionSheet());\r\n        binding.btnDriverAnotherOffer.setOnClickListener(v -> {\r\n            navigateToDriverAddOffer();\r\n        });\r\n        binding.tvShare.setOnClickListener(v -> {\r\n            closeDriverActionSheet();\r\n            share();\r\n        });\r\n        binding.tvEndOrder.setOnClickListener(v -> {\r\n            closeDriverActionSheet();\r\n            endOrder();\r\n        });\r\n        binding.flCall.setOnClickListener(v -> {\r\n            if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n                Intent intent = new Intent(Intent.ACTION_DIAL,Uri.parse(\"tel:\"+orderModel.getDriver().getPhone_code()+orderModel.getDriver().getPhone()));\r\n                startActivity(intent);\r\n            } else {\r\n                Intent intent = new Intent(Intent.ACTION_DIAL,Uri.parse(\"tel:\"+orderModel.getClient().getPhone_code()+orderModel.getClient().getPhone()));\r\n                startActivity(intent);\r\n\r\n            }\r\n        });\r\n        binding.btnBill.setOnClickListener(v -> {\r\n            String orderStatus = orderModel.getOrder_status();\r\n            switch (orderStatus){\r\n                case \"accept_driver\":\r\n                    Intent intent = new Intent(this, AddBillActivity.class);\r\n                    intent.putExtra(\"data\",orderModel);\r\n                    startActivityForResult(intent,200);\r\n                    break;\r\n                case \"bill_attach\":\r\n                    changeOrderStatus(\"order_collected\");\r\n                    break;\r\n                case \"order_collected\":\r\n                    changeOrderStatus(\"reach_to_client\");\r\n                    break;\r\n                case \"reach_to_client\":\r\n                    closeDriverActionSheet();\r\n                    endOrder();\r\n                    break;\r\n            }\r\n\r\n        });\r\n        binding.flMap.setOnClickListener(v -> {\r\n            if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n                Intent intent = new Intent(this, FollowOrderActivity.class);\r\n                intent.putExtra(\"data\",orderModel);\r\n                startActivity(intent);\r\n            } else {\r\n                Intent intent = new Intent(this, DriverUpdateLocationActivity.class);\r\n                intent.putExtra(\"data\",orderModel);\r\n                startActivity(intent);\r\n\r\n            }\r\n        });\r\n        adapter = new ChatAdapter(messageModelList,this,userModel.getUser().getId());\r\n        binding.recView.setLayoutManager(new LinearLayoutManager(this));\r\n        binding.recView.setAdapter(adapter);\r\n        binding.imageSend.setOnClickListener(v -> {\r\n            String message =binding.edtMessage.getText().toString().trim();\r\n            if (!message.isEmpty()){\r\n                binding.edtMessage.setText(null);\r\n                sendChatText(message);\r\n            }\r\n        });\r\n        binding.edtRateComment.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                if (s.toString().isEmpty()){\r\n                    binding.tvCount.setText(String.format(Locale.ENGLISH,\"%s/%s\",\"0\",\"150\"));\r\n                }else {\r\n                    binding.tvCount.setText(String.format(Locale.ENGLISH,\"%s/%s\",s.toString().length(),\"150\"));\r\n\r\n                }\r\n            }\r\n        });\r\n        binding.tvNotNow.setOnClickListener(v -> {closeRateActionSheet();});\r\n        binding.tvNotNow.setPaintFlags(binding.tvNotNow.getPaintFlags()| Paint.UNDERLINE_TEXT_FLAG);\r\n        binding.btnRate.setOnClickListener(v -> {\r\n            String comment = binding.edtRateComment.getText().toString();\r\n            rateModel.setComment(comment);\r\n            rate();\r\n        });\r\n\r\n        binding.recViewRateReason.setLayoutManager(new GridLayoutManager(this,2));\r\n        rateReasonAdapter = new RateReasonAdapter(new ArrayList<>(),this,null);\r\n        binding.recViewRateReason.setAdapter(rateReasonAdapter);\r\n\r\n        binding.emoji1.setOnClickListener(v -> {rate1UI();});\r\n        binding.emoji2.setOnClickListener(v -> {rate2UI();});\r\n        binding.emoji3.setOnClickListener(v -> {rate3UI();});\r\n        binding.emoji4.setOnClickListener(v -> {rate4UI();});\r\n        binding.emoji5.setOnClickListener(v -> {rate5UI();});\r\n\r\n        binding.flComplain.setOnClickListener(v -> {\r\n            if (settingModel!=null){\r\n                Intent intent = new Intent(this, SignUpDelegateActivity.class);\r\n                String url = Tags.base_url+settingModel.getSettings().getSubmit_the_complaint();\r\n                intent.putExtra(\"url\",url);\r\n                startActivity(intent);\r\n            }else {\r\n                getSetting();\r\n            }\r\n        });\r\n\r\n        binding.btnResend.setOnClickListener(v -> {\r\n            Intent intent = new Intent(this, ResendOrderTextActivity.class);\r\n            intent.putExtra(\"data\",orderModel);\r\n            startActivity(intent);\r\n        });\r\n        if (!EventBus.getDefault().isRegistered(this)){\r\n            EventBus.getDefault().register(this);\r\n        }\r\n\r\n        getOrderById(null);\r\n\r\n    }\r\n\r\n\r\n\r\n    private void getOrderById(ProgressDialog dialog) {\r\n        Api.getService(Tags.base_url).getSingleOrder(userModel.getUser().getToken(), order_id, userModel.getUser().getId())\r\n                .enqueue(new Callback<SingleOrderDataModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<SingleOrderDataModel> call, Response<SingleOrderDataModel> response) {\r\n                        binding.progBarData.setVisibility(View.GONE);\r\n                        if (dialog != null) {\r\n                            dialog.dismiss();\r\n                        }\r\n                        if (response.isSuccessful()) {\r\n                            orderModel = response.body().getOrder();\r\n                            binding.setModel(orderModel);\r\n                            updateUi(orderModel);\r\n\r\n                        } else {\r\n                            if (dialog != null) {\r\n                                dialog.dismiss();\r\n                            }\r\n                            binding.progBarData.setVisibility(View.GONE);\r\n\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SingleOrderDataModel> call, Throwable t) {\r\n                        try {\r\n                            if (dialog != null) {\r\n                                dialog.dismiss();\r\n                            }\r\n                            binding.progBarData.setVisibility(View.GONE);\r\n\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void updateUi(OrderModel orderModel) {\r\n\r\n        rateClear();\r\n\r\n        binding.tvEndOrder.setVisibility(View.GONE);\r\n\r\n        if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n            binding.imageMore.setVisibility(View.VISIBLE);\r\n            if (orderModel.getDriver()!=null){\r\n                preferences.create_chat_user_id(this,String.valueOf(orderModel.getDriver().getId()));\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            if (orderModel.getClient()!=null){\r\n                preferences.create_chat_user_id(this,String.valueOf(orderModel.getClient().getId()));\r\n\r\n            }\r\n\r\n            binding.imageMore.setVisibility(View.VISIBLE);\r\n            if (orderModel.getDriver_last_offer() == null) {\r\n                binding.tvReadyDeliverOrder.setVisibility(View.VISIBLE);\r\n                binding.tvMsgLeft.setText(orderModel.getDetails());\r\n                binding.tvMsgLeft.setVisibility(View.VISIBLE);\r\n            } else {\r\n                binding.tvReadyDeliverOrder.setVisibility(View.GONE);\r\n                if (orderModel.getOrder_status().equals(\"new_order\") || orderModel.getOrder_status().equals(\"pennding\") || orderModel.getOrder_status().equals(\"have_offer\")) {\r\n                    binding.tvMsgLeft.setText(orderModel.getDetails());\r\n                    binding.tvMsgLeft.setVisibility(View.VISIBLE);\r\n\r\n                } else {\r\n                    binding.flDriverOffers.setVisibility(View.GONE);\r\n                    binding.tvMsgLeft.setVisibility(View.GONE);\r\n\r\n\r\n                }\r\n                binding.tvDriverOfferPrice.setText(String.format(Locale.ENGLISH, \"%s %s %s %s\", getString(R.string.your_offer_of), orderModel.getDriver_last_offer().getOffer_value(), currency, getString(R.string.sent_to_the_client_please_wait_until_he_accepts_your_offer_thank_you)));\r\n            }\r\n\r\n        }\r\n\r\n\r\n        String status = orderModel.getOrder_status();\r\n        Log.e(\"status\",status);\r\n        switch (status) {\r\n            case \"new_order\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.pending_bg);\r\n                binding.orderStatus.setText(getString(R.string.pending));\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n\r\n                if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n                    binding.tvMsgRight.setText(orderModel.getDetails());\r\n                    binding.tvMsgRight.setVisibility(View.VISIBLE);\r\n\r\n                    binding.flOffers.setVisibility(View.VISIBLE);\r\n                    binding.llOfferData.setVisibility(View.VISIBLE);\r\n                    binding.llComingOffer.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.tvMsgLeft.setText(orderModel.getDetails());\r\n                    binding.tvMsgLeft.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n\r\n                break;\r\n            case \"pennding\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.pending_bg);\r\n                binding.orderStatus.setText(getString(R.string.pending));\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n\r\n                if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n                    binding.tvMsgRight.setText(orderModel.getDetails());\r\n                    binding.tvMsgRight.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    binding.tvMsgLeft.setText(orderModel.getDetails());\r\n                    binding.tvMsgLeft.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n\r\n                break;\r\n\r\n            case \"have_offer\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.pending_bg);\r\n                binding.orderStatus.setText(getString(R.string.pending));\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n                if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n                    binding.tvMsgRight.setText(orderModel.getDetails());\r\n                    binding.tvMsgRight.setVisibility(View.VISIBLE);\r\n\r\n                    if (Integer.parseInt(orderModel.getOffers_count()) > 0) {\r\n                        binding.flOffers.setVisibility(View.VISIBLE);\r\n                        binding.llOfferData.setVisibility(View.GONE);\r\n                        binding.llComingOffer.setVisibility(View.VISIBLE);\r\n                        if (loadData){\r\n                            getOffers();\r\n\r\n                        }\r\n\r\n                    } else {\r\n                        binding.flOffers.setVisibility(View.VISIBLE);\r\n                        binding.llOfferData.setVisibility(View.VISIBLE);\r\n                        binding.llComingOffer.setVisibility(View.GONE);\r\n                    }\r\n                } else {\r\n\r\n                    if (orderModel.getDriver_last_offer() != null) {\r\n\r\n                        if (orderModel.getDriver_last_offer().getStatus().equals(\"refuse\")) {\r\n                            binding.flClientRefuseOffer.setVisibility(View.VISIBLE);\r\n                            binding.flOffers.setVisibility(View.GONE);\r\n                            binding.flDriverOffers.setVisibility(View.GONE);\r\n                        } else if (orderModel.getDriver_last_offer().getStatus().equals(\"new\")) {\r\n                            binding.flDriverOffers.setVisibility(View.VISIBLE);\r\n                            binding.flClientRefuseOffer.setVisibility(View.GONE);\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        binding.flDriverOffers.setVisibility(View.GONE);\r\n                        binding.tvReadyDeliverOrder.setVisibility(View.VISIBLE);\r\n\r\n                    }\r\n                    binding.tvMsgLeft.setText(orderModel.getDetails());\r\n                    binding.tvMsgLeft.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n\r\n                break;\r\n            case \"accept_driver\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.done_bg);\r\n                binding.orderStatus.setText(R.string.picking_order);\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.VISIBLE);\r\n                binding.imageChooser.setVisibility(View.VISIBLE);\r\n                binding.imageSend.setVisibility(View.VISIBLE);\r\n                binding.msgContent.setVisibility(View.VISIBLE);\r\n                binding.consUserData.setVisibility(View.VISIBLE);\r\n                binding.flOffers.setVisibility(View.GONE);\r\n                binding.llOfferData.setVisibility(View.GONE);\r\n                binding.llComingOffer.setVisibility(View.GONE);\r\n\r\n                if (loadData){\r\n                    updateUserUi();\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n            case \"bill_attach\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.rounded_primary_dark);\r\n                binding.orderStatus.setText(getString(R.string.picking_order));\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.VISIBLE);\r\n                binding.imageChooser.setVisibility(View.VISIBLE);\r\n                binding.imageSend.setVisibility(View.VISIBLE);\r\n                binding.msgContent.setVisibility(View.VISIBLE);\r\n                binding.consUserData.setVisibility(View.VISIBLE);\r\n                binding.flOffers.setVisibility(View.GONE);\r\n                binding.llOfferData.setVisibility(View.GONE);\r\n                binding.llComingOffer.setVisibility(View.GONE);\r\n                binding.btnBill.setText(R.string.received);\r\n                binding.tvBillStatus.setText(R.string.click_on_receive);\r\n\r\n                if (loadData){\r\n                    updateUserUi();\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n                        Log.e(\"888\",\"888\");\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"order_collected\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.done_bg);\r\n                binding.orderStatus.setText(R.string.delivering2);\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.VISIBLE);\r\n                binding.imageChooser.setVisibility(View.VISIBLE);\r\n                binding.imageSend.setVisibility(View.VISIBLE);\r\n                binding.msgContent.setVisibility(View.VISIBLE);\r\n                binding.consUserData.setVisibility(View.VISIBLE);\r\n                binding.flOffers.setVisibility(View.GONE);\r\n                binding.llOfferData.setVisibility(View.GONE);\r\n                binding.llComingOffer.setVisibility(View.GONE);\r\n                binding.btnBill.setText(R.string.on_location);\r\n                binding.tvBillStatus.setText(R.string.click_on_reached_location);\r\n                binding.flMap.setVisibility(View.VISIBLE);\r\n                if (loadData){\r\n                    updateUserUi();\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"reach_to_client\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.done_bg);\r\n                binding.orderStatus.setText(R.string.on_location);\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.VISIBLE);\r\n                binding.imageChooser.setVisibility(View.VISIBLE);\r\n                binding.imageSend.setVisibility(View.VISIBLE);\r\n                binding.msgContent.setVisibility(View.VISIBLE);\r\n                binding.consUserData.setVisibility(View.VISIBLE);\r\n                binding.flOffers.setVisibility(View.GONE);\r\n                binding.llOfferData.setVisibility(View.GONE);\r\n                binding.llComingOffer.setVisibility(View.GONE);\r\n                binding.btnBill.setText(getString(R.string.delivered));\r\n                binding.tvBillStatus.setText(R.string.click_on_deliverd);\r\n                binding.tvEndOrder.setVisibility(View.VISIBLE);\r\n                binding.flMap.setVisibility(View.INVISIBLE);\r\n\r\n                rateModel = new RateModel();\r\n\r\n                if(loadData){\r\n                    updateUserUi();\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n\r\n                    }\r\n                }\r\n\r\n                /*if ((userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() != orderModel.getClient().getId())) {\r\n                    binding.flCall.setVisibility(View.VISIBLE);\r\n                }*/\r\n\r\n                binding.flCall.setVisibility(View.VISIBLE);\r\n\r\n\r\n\r\n                break;\r\n\r\n            case \"driver_end_rate\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.done_bg);\r\n                binding.orderStatus.setText(getString(R.string.delivered));\r\n                binding.btnResend.setVisibility(View.GONE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n                binding.llBill.setVisibility(View.GONE);\r\n                binding.flCall.setVisibility(View.INVISIBLE);\r\n                binding.flMap.setVisibility(View.INVISIBLE);\r\n\r\n                if (loadData){\r\n                    updateUserUi();\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n\r\n                    }\r\n                }\r\n\r\n                if (isFromFireBase){\r\n                    setResult(RESULT_OK);\r\n                    finish();\r\n                }\r\n                break;\r\n            case \"client_end_and_rate\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.done_bg);\r\n                binding.orderStatus.setText(getString(R.string.delivered));\r\n                binding.btnResend.setVisibility(View.VISIBLE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n                binding.flCall.setVisibility(View.INVISIBLE);\r\n                binding.llBill.setVisibility(View.GONE);\r\n                binding.flMap.setVisibility(View.INVISIBLE);\r\n\r\n                if (loadData){\r\n                    updateUserUi();\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n            case \"order_driver_back\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.rejected_bg);\r\n                binding.orderStatus.setText(getString(R.string.cancel));\r\n                binding.btnResend.setVisibility(View.VISIBLE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n                binding.tvCanceled.setVisibility(View.VISIBLE);\r\n                binding.tvReadyDeliverOrder.setVisibility(View.GONE);\r\n                binding.flCall.setVisibility(View.INVISIBLE);\r\n                binding.llBill.setVisibility(View.GONE);\r\n                binding.flMap.setVisibility(View.INVISIBLE);\r\n\r\n                if (loadData){\r\n                    updateUserUi();\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"client_cancel\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.rejected_bg);\r\n                binding.orderStatus.setText(getString(R.string.canceled));\r\n                binding.btnResend.setVisibility(View.VISIBLE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n                binding.tvCanceled.setVisibility(View.VISIBLE);\r\n                binding.flCall.setVisibility(View.INVISIBLE);\r\n                binding.tvReadyDeliverOrder.setVisibility(View.GONE);\r\n                binding.llBill.setVisibility(View.GONE);\r\n                binding.flMap.setVisibility(View.INVISIBLE);\r\n\r\n                if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n                    binding.tvMsgRight.setText(orderModel.getDetails());\r\n                    binding.tvMsgRight.setVisibility(View.VISIBLE);\r\n\r\n                } else {\r\n                    binding.tvMsgLeft.setText(orderModel.getDetails());\r\n                    binding.tvMsgLeft.setVisibility(View.VISIBLE);\r\n                }\r\n                break;\r\n            case \"cancel_for_late\":\r\n                binding.orderStatus.setBackgroundResource(R.drawable.rejected_bg);\r\n                binding.orderStatus.setText(getString(R.string.cancel));\r\n                binding.btnResend.setVisibility(View.VISIBLE);\r\n                binding.imageRecord.setVisibility(View.GONE);\r\n                binding.imageChooser.setVisibility(View.GONE);\r\n                binding.imageSend.setVisibility(View.GONE);\r\n                binding.msgContent.setVisibility(View.GONE);\r\n                binding.tvCanceled.setVisibility(View.VISIBLE);\r\n                binding.flCall.setVisibility(View.INVISIBLE);\r\n                binding.tvReadyDeliverOrder.setVisibility(View.GONE);\r\n                binding.llBill.setVisibility(View.GONE);\r\n                binding.flMap.setVisibility(View.INVISIBLE);\r\n\r\n\r\n                if (loadData){\r\n                    if (orderModel.getRoom_id()!=null&&!orderModel.getRoom_id().isEmpty()){\r\n                        getChatMessages(orderModel.getRoom_id());\r\n\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void updateUserUi() {\r\n        binding.tvMsgLeft.setVisibility(View.GONE);\r\n        binding.tvMsgRight.setVisibility(View.GONE);\r\n\r\n\r\n        if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n            Picasso.get().load(Uri.parse(Tags.IMAGE_URL + orderModel.getDriver().getLogo())).placeholder(R.drawable.user_avatar).fit().into(binding.userImage);\r\n            binding.tvName.setText(orderModel.getDriver().getName());\r\n            binding.rateBar.setRating(Float.parseFloat(orderModel.getDriver().getRate()));\r\n\r\n            /*if (orderModel.getOrder_status().equals(\"accept_driver\")||orderModel.getOrder_status().equals(\"bill_attach\")||orderModel.getOrder_status().equals(\"order_collected\")||orderModel.getOrder_status().equals(\"reach_to_client\")){\r\n\r\n            }else {\r\n                binding.flCall.setVisibility(View.GONE);\r\n\r\n            }*/\r\n\r\n            binding.flCall.setVisibility(View.VISIBLE);\r\n\r\n            binding.llBill.setVisibility(View.GONE);\r\n            double offer_value = 0.0;\r\n            if (orderModel.getOrder_offer() != null) {\r\n                offer_value = Double.parseDouble(orderModel.getOrder_offer().getOffer_value()) + Double.parseDouble(orderModel.getOrder_offer().getTax_value());\r\n\r\n            }\r\n            binding.tvOfferValue.setText(String.format(Locale.ENGLISH, \"%.2f %s\", offer_value, currency));\r\n        } else {\r\n\r\n            Picasso.get().load(Uri.parse(Tags.IMAGE_URL + orderModel.getClient().getLogo())).placeholder(R.drawable.user_avatar).fit().into(binding.userImage);\r\n\r\n            String name =\"\";\r\n\r\n\r\n            if (orderModel.getClient().getName().length()==2){\r\n                name = orderModel.getClient().getName().substring(0,1)+\"**\";\r\n            }else if (orderModel.getClient().getName().length()>=3){\r\n                String[] s = orderModel.getClient().getName().split(\" \");\r\n                name = s[0].substring(0,2)+\"**\"+s[0].substring(s[0].length()-1);\r\n\r\n            }else {\r\n                name = orderModel.getClient().getName();\r\n            }\r\n\r\n            binding.tvName.setText(name);\r\n            binding.rateBar.setRating(Float.parseFloat(orderModel.getClient().getRate()));\r\n            binding.llBill.setVisibility(View.VISIBLE);\r\n            binding.flCall.setVisibility(View.VISIBLE);\r\n\r\n            /*if (orderModel.getOrder_status().equals(\"reach_to_client\")){\r\n                binding.flCall.setVisibility(View.VISIBLE);\r\n            }else {\r\n                binding.flCall.setVisibility(View.INVISIBLE);\r\n            }*/\r\n            double offer_value = 0.0;\r\n            if (orderModel.getDriver_last_offer() != null) {\r\n                offer_value = Double.parseDouble(orderModel.getDriver_last_offer().getOffer_value());\r\n            }\r\n            binding.tvOfferValue.setText(String.format(Locale.ENGLISH, \"%.2f %s\", offer_value, currency));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void changeOrderStatus(String status){\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).changeOrderStatus(userModel.getUser().getToken(), orderModel.getDriver().getId(), orderModel.getClient().getId(), order_id, status)\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                isDataChanged = true;\r\n                                orderModel.setOrder_status(status);\r\n                                binding.setModel(orderModel);\r\n                                loadData = false;\r\n                                updateUi(orderModel);\r\n\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void navigateToDriverAddOffer() {\r\n\r\n        Intent intent = new Intent(this, DelegateAddOfferActivity.class);\r\n        double pick_up_distance = getDistance(new LatLng(Double.parseDouble(userModel.getUser().getLatitude()), Double.parseDouble(userModel.getUser().getLongitude())), new LatLng(Double.parseDouble(orderModel.getMarket_latitude()), Double.parseDouble(orderModel.getMarket_longitude())));\r\n        double drop_off_distance = getDistance(new LatLng(Double.parseDouble(userModel.getUser().getLatitude()), Double.parseDouble(userModel.getUser().getLongitude())), new LatLng(Double.parseDouble(orderModel.getClient_latitude()), Double.parseDouble(orderModel.getClient_longitude())));\r\n\r\n        double from_loc_to_loc_distance = getDistance(new LatLng(Double.parseDouble(orderModel.getClient_latitude()), Double.parseDouble(orderModel.getClient_longitude())), new LatLng(Double.parseDouble(orderModel.getMarket_latitude()), Double.parseDouble(orderModel.getMarket_longitude())));\r\n        FromToLocationModel fromToLocationModel = new FromToLocationModel(Double.parseDouble(orderModel.getMarket_latitude()), Double.parseDouble(orderModel.getMarket_longitude()), orderModel.getMarket_address(), pick_up_distance, Double.parseDouble(orderModel.getClient_latitude()), Double.parseDouble(orderModel.getClient_longitude()), orderModel.getClient_address(), drop_off_distance, from_loc_to_loc_distance, Double.parseDouble(userModel.getUser().getLatitude()), Double.parseDouble(userModel.getUser().getLongitude()));\r\n        intent.putExtra(\"data\", fromToLocationModel);\r\n        intent.putExtra(\"user_token\", userModel.getUser().getToken());\r\n        intent.putExtra(\"client_id\", orderModel.getClient().getId());\r\n        intent.putExtra(\"order_id\", order_id);\r\n        intent.putExtra(\"driver_id\", userModel.getUser().getId());\r\n        startActivityForResult(intent, 100);\r\n    }\r\n\r\n    public void driverLeaveOrderActions() {\r\n        reasonType = 1;\r\n        binding.tvActionType.setText(R.string.withdraw_order);\r\n        actionReasonList.clear();\r\n        ChatActionModel chatActionModel1 = new ChatActionModel(\"موقع المتجر بعيد\");\r\n        actionReasonList.add(chatActionModel1);\r\n        ChatActionModel chatActionModel2 = new ChatActionModel(\"لا أرغب في توصيل الطلب\");\r\n        actionReasonList.add(chatActionModel2);\r\n        chatActionAdapter.notifyDataSetChanged();\r\n        openSheet();\r\n\r\n    }\r\n\r\n    private void changeDriverActions() {\r\n        reasonType = 2;\r\n        binding.tvActionType.setText(R.string.change_driver);\r\n        actionReasonList.clear();\r\n        ChatActionModel chatActionModel1 = new ChatActionModel(\"المندوب غير مناسب\");\r\n        actionReasonList.add(chatActionModel1);\r\n        ChatActionModel chatActionModel2 = new ChatActionModel(\"المندوب طلب التواصل خارج التطبيق\");\r\n        actionReasonList.add(chatActionModel2);\r\n        ChatActionModel chatActionModel3 = new ChatActionModel(\"المندوب لم يقبل الدفع الالكتروني\");\r\n        actionReasonList.add(chatActionModel3);\r\n        ChatActionModel chatActionModel4 = new ChatActionModel(\"سبب آخر\");\r\n        actionReasonList.add(chatActionModel4);\r\n        chatActionAdapter.notifyDataSetChanged();\r\n        openSheet();\r\n    }\r\n\r\n    //after driver accept order\r\n    public void deleteOrderActions(OffersModel offersModel) {\r\n\r\n        this.offersModel = offersModel;\r\n        reasonType = 3;\r\n        binding.tvActionType.setText(R.string.delete_order);\r\n        actionReasonList.clear();\r\n        ChatActionModel chatActionModel1 = new ChatActionModel(\"الطلب متأخر والمندوب لا يجيب\");\r\n        actionReasonList.add(chatActionModel1);\r\n        ChatActionModel chatActionModel2 = new ChatActionModel(\"المندوب طلب التواصل خارج التطبيق\");\r\n        actionReasonList.add(chatActionModel2);\r\n        ChatActionModel chatActionModel3 = new ChatActionModel(\"المندوب غير جاد\");\r\n        actionReasonList.add(chatActionModel3);\r\n        ChatActionModel chatActionModel4 = new ChatActionModel(\"المندوب طلب الإلغاء\");\r\n        actionReasonList.add(chatActionModel4);\r\n        ChatActionModel chatActionModel5 = new ChatActionModel(\"المندوب لم يقبل الدفع الالكتروني\");\r\n        actionReasonList.add(chatActionModel5);\r\n        ChatActionModel chatActionModel6 = new ChatActionModel(\"تغيير المندوب\");\r\n        actionReasonList.add(chatActionModel6);\r\n        ChatActionModel chatActionModel7 = new ChatActionModel(\"لم اعد احتاج الطلب\");\r\n        actionReasonList.add(chatActionModel7);\r\n        ChatActionModel chatActionModel8 = new ChatActionModel(\"سبب آخر\");\r\n        actionReasonList.add(chatActionModel8);\r\n        chatActionAdapter.notifyDataSetChanged();\r\n\r\n        openSheet();\r\n    }\r\n\r\n    public void deleteOrderActionBeforeDriverAcceptOrderActions(OffersModel offersModel) {\r\n        this.offersModel = offersModel;\r\n        reasonType = 3;\r\n        binding.tvActionType.setText(R.string.delete_order);\r\n        actionReasonList.clear();\r\n        ChatActionModel chatActionModel1 = new ChatActionModel(\"سعر التوصيل مرتفع\");\r\n        actionReasonList.add(chatActionModel1);\r\n        ChatActionModel chatActionModel2 = new ChatActionModel(\"لم اعد احتاج الطلب\");\r\n        actionReasonList.add(chatActionModel2);\r\n        ChatActionModel chatActionModel3 = new ChatActionModel(\"سبب آخر\");\r\n        actionReasonList.add(chatActionModel3);\r\n        chatActionAdapter.notifyDataSetChanged();\r\n        openSheet();\r\n    }\r\n\r\n    public void setReason(ChatActionModel chatActionModel) {\r\n        this.chatActionModel = chatActionModel;\r\n\r\n    }\r\n\r\n    private void leaveOrder(ChatActionModel chatActionModel) {\r\n        int driver_id =0;\r\n        if (orderModel!=null&&orderModel.getDriver()!=null){\r\n            driver_id = orderModel.getDriver().getId();\r\n        }\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).driverLeaveOrder(userModel.getUser().getToken(), orderModel.getClient().getId(), driver_id, order_id, chatActionModel.getAction())\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                setResult(RESULT_OK);\r\n                                finish();\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void changeDriver(ChatActionModel chatActionModel) {\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).changeDriver(userModel.getUser().getToken(), orderModel.getClient().getId(), order_id, chatActionModel.getAction())\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                setResult(RESULT_OK);\r\n                                finish();\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void deleteOrder(ChatActionModel chatActionModel) {\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).clientDeleteOrder(userModel.getUser().getToken(), orderModel.getClient().getId(), order_id, chatActionModel.getAction())\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                setResult(RESULT_OK);\r\n                                finish();\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void clientAcceptOffer(OffersModel offersModel) {\r\n\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).clientAcceptOffer(userModel.getUser().getToken(), orderModel.getClient().getId(), Integer.parseInt(offersModel.getDriver_id()), order_id, offersModel.getId())\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                isDataChanged = true;\r\n                                getOrderById(dialog);\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    public void clientRefuseOffer(OffersModel offersModel, String type) {\r\n        int driver_id =0;\r\n        if (offersModel!=null&&offersModel.getDriver_id()!=null){\r\n            driver_id = Integer.parseInt(offersModel.getDriver_id());\r\n        }else {\r\n            if (orderModel!=null&&orderModel.getDriver()!=null){\r\n                driver_id = orderModel.getDriver().getId();\r\n            }\r\n        }\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).clientRefuseOffer(userModel.getUser().getToken(), orderModel.getClient().getId(),driver_id, order_id, offersModel.getId(), type)\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                isDataChanged = true;\r\n                                getOrderById(dialog);\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    public void driverCancelOffer() {\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).driverCancelOffer(userModel.getUser().getToken(), userModel.getUser().getId(), order_id)\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        if (response.isSuccessful()) {\r\n                            dialog.dismiss();\r\n                            if (response.body() != null) {\r\n                                isDataChanged = true;\r\n                                setResult(RESULT_OK);\r\n                                finish();\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n\r\n    private void share() {\r\n\r\n    }\r\n\r\n    private void endOrder() {\r\n        openRateSheet();\r\n    }\r\n\r\n\r\n    private void rate() {\r\n\r\n        ProgressDialog dialog = Common.createProgressDialog(this, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).driverRate(userModel.getUser().getToken(), orderModel.getDriver().getId(), orderModel.getClient().getId(), order_id, rateModel.getRate(),rateModel.getReason(),rateModel.getComment())\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                isDataChanged = true;\r\n                                setResult(RESULT_OK);\r\n                                finish();\r\n\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n    }\r\n    private void rateClear(){\r\n        Picasso.get().load(Tags.IMAGE_URL+orderModel.getClient().getLogo()).placeholder(R.drawable.user_avatar).into(binding.clientImage);\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_gray8);\r\n        binding.btnRate.setText(getString(R.string.rate_first));\r\n        binding.edtRateComment.setText(null);\r\n        rateReasonAdapter.addData(new ArrayList<>());\r\n        rateModel = new RateModel();\r\n    }\r\n    private void rate1UI(){\r\n\r\n        binding.emoji1.setImageResource(R.drawable.sad2);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(this,R.color.black));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        /*List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(1,\"يعاكس\",false));\r\n        rateReasonList.add(new RateReason(2,\"غير مهزب\",false));\r\n        rateReasonList.add(new RateReason(3,\"مدخن\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonList.add(new RateReason(5,\"غير ملتزم بالتعليمات الصحية\",false));\r\n        rateReasonAdapter.addData(rateReasonList);*/\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(1);\r\n\r\n\r\n    }\r\n    private void rate2UI(){\r\n        Picasso.get().load(Tags.IMAGE_URL+orderModel.getClient().getLogo()).placeholder(R.drawable.user_avatar).into(binding.clientImage);\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad2);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(this,R.color.black));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        /*List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(1,\"يعاكس\",false));\r\n        rateReasonList.add(new RateReason(2,\"غير مهزب\",false));\r\n        rateReasonList.add(new RateReason(3,\"مدخن\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonList.add(new RateReason(5,\"غير ملتزم بالتعليمات الصحية\",false));\r\n        rateReasonAdapter.addData(rateReasonList);*/\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(2);\r\n\r\n    }\r\n    private void rate3UI(){\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad4);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(this,R.color.black));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n       /* List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(1,\"يعاكس\",false));\r\n        rateReasonList.add(new RateReason(2,\"غير مهزب\",false));\r\n        rateReasonList.add(new RateReason(3,\"مدخن\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonList.add(new RateReason(5,\"غير ملتزم بالتعليمات الصحية\",false));\r\n        rateReasonAdapter.addData(rateReasonList);*/\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(3);\r\n\r\n\r\n    }\r\n    private void rate4UI(){\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile2);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(this,R.color.black));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n       /* List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(6,\"يضايق\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonAdapter.addData(rateReasonList);*/\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(4);\r\n\r\n\r\n    }\r\n    private void rate5UI(){\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile4);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(this,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(this,R.color.black));\r\n       /* List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(7,\"خدمة سريعة\",false));\r\n        rateReasonList.add(new RateReason(8,\"محترم\",false));\r\n        rateReasonList.add(new RateReason(9,\"إحترافي\",false));\r\n        rateReasonList.add(new RateReason(10,\"متجاوب\",false));\r\n        rateReasonAdapter.addData(rateReasonList);*/\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(5);\r\n\r\n\r\n    }\r\n\r\n    private void openSheet() {\r\n        binding.flAction.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(this, R.anim.slide_up);\r\n        binding.flAction.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n                binding.flAction.setVisibility(View.VISIBLE);\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void closeSheet() {\r\n\r\n        binding.flAction.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(this, R.anim.slide_down);\r\n        binding.flAction.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n                binding.flAction.setVisibility(View.GONE);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void openDriverActionSheet() {\r\n        binding.flDriverAction.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(this, R.anim.slide_up);\r\n        binding.flDriverAction.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n                binding.flDriverAction.setVisibility(View.VISIBLE);\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void closeDriverActionSheet() {\r\n\r\n        binding.flDriverAction.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(this, R.anim.slide_down);\r\n        binding.flDriverAction.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n                binding.flDriverAction.setVisibility(View.GONE);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void openRateSheet() {\r\n        rateClear();\r\n\r\n        binding.flRate.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(this, R.anim.slide_up);\r\n        binding.flRate.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n                binding.flRate.setVisibility(View.VISIBLE);\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void closeRateActionSheet() {\r\n\r\n        binding.flRate.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(this, R.anim.slide_down);\r\n        binding.flRate.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n                binding.flRate.setVisibility(View.GONE);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getSetting(){\r\n        ProgressDialog dialog = Common.createProgressDialog(this,getString(R.string.wait));\r\n        dialog.setCancelable(true);\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).getSetting(lang)\r\n                .enqueue(new Callback<SettingModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<SettingModel> call, Response<SettingModel> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                settingModel = response.body();\r\n                                Intent intent = new Intent(ChatActivity.this, SignUpDelegateActivity.class);\r\n                                String url = Tags.base_url+settingModel.getSettings().getSubmit_the_complaint();\r\n                                intent.putExtra(\"url\",url);\r\n                                startActivity(intent);\r\n\r\n                            }\r\n                        } else {\r\n\r\n                            dialog.dismiss();\r\n\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SettingModel> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void sendAttachment(String file_uri,String message, String attachment_type) {\r\n        binding.expandedLayout.collapse(true);\r\n        Intent intent = new Intent(this, ServiceUploadAttachment.class);\r\n        intent.putExtra(\"file_uri\", file_uri);\r\n        intent.putExtra(\"user_token\", userModel.getUser().getToken());\r\n        intent.putExtra(\"user_id\", userModel.getUser().getId());\r\n        intent.putExtra(\"to_user_id\",orderModel.getDriver().getId());\r\n        intent.putExtra(\"message\",message);\r\n        intent.putExtra(\"room_id\", Integer.parseInt(orderModel.getRoom_id()));\r\n        intent.putExtra(\"attachment_type\", attachment_type);\r\n        startService(intent);\r\n\r\n\r\n    }\r\n\r\n    private void sendChatText(String message) {\r\n\r\n        String to_user_id=\"0\";\r\n\r\n        if (userModel.getUser().getUser_type().equals(\"client\") || (userModel.getUser().getUser_type().equals(\"driver\") && userModel.getUser().getId() == orderModel.getClient().getId())) {\r\n            to_user_id = String.valueOf(orderModel.getDriver().getId());\r\n        } else {\r\n            to_user_id = String.valueOf(orderModel.getClient().getId());\r\n        }\r\n\r\n\r\n        Api.getService(Tags.base_url)\r\n                .sendChatMessage( userModel.getUser().getToken(),Integer.parseInt(orderModel.getRoom_id()),userModel.getUser().getId(),Integer.parseInt(to_user_id),\"message\", message)\r\n                .enqueue(new Callback<SingleMessageDataModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<SingleMessageDataModel> call, Response<SingleMessageDataModel> response) {\r\n                        binding.progBar.setVisibility(View.GONE);\r\n                        if (response.isSuccessful()) {\r\n\r\n                            if (response.body() != null && response.body().getData() != null) {\r\n                                isNewMessage = true;\r\n                                MessageModel model = response.body().getData();\r\n                                messageModelList.add(model);\r\n                                adapter.notifyItemInserted(messageModelList.size());\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SingleMessageDataModel> call, Throwable t) {\r\n                        try {\r\n                            binding.progBar.setVisibility(View.GONE);\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"Error\", t.getMessage());\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().contains(\"socket\")) {\r\n\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n                        } catch (Exception e) {\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void getChatMessages(String room_id)\r\n    {\r\n        defaultSettings.setRoom_id(Integer.parseInt(room_id));\r\n        preferences.createUpdateAppSetting(this,defaultSettings);\r\n        Log.e(\"user_type\",userModel.getUser().getUser_type());\r\n\r\n        Api.getService(Tags.base_url)\r\n                .getChatMessages(userModel.getUser().getToken(),room_id,userModel.getUser().getId(),order_id,userModel.getUser().getUser_type(),1, \"on\", 40)\r\n                .enqueue(new Callback<MessageDataModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<MessageDataModel> call, Response<MessageDataModel> response) {\r\n                        binding.progBar.setVisibility(View.GONE);\r\n                        if (response.isSuccessful()) {\r\n\r\n                            if (response.body() != null && response.body().getData() != null) {\r\n\r\n                                if (response.body().getData().size() > 0) {\r\n                                    messageModelList.clear();\r\n                                    messageModelList.addAll(response.body().getData());\r\n                                    adapter.notifyDataSetChanged();\r\n                                    binding.recView.postDelayed(() -> binding.recView.smoothScrollToPosition(messageModelList.size() - 1), 200);\r\n\r\n                                }\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            if (response.code() == 500) {\r\n                                Toast.makeText(ChatActivity.this, \"Server Error\", Toast.LENGTH_SHORT).show();\r\n                            } else {\r\n                                Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                            }\r\n\r\n                            try {\r\n                                Log.e(\"error code\", response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<MessageDataModel> call, Throwable t) {\r\n                        try {\r\n                            binding.progBar.setVisibility(View.GONE);\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"Error\", t.getMessage());\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().contains(\"socket\")) {\r\n\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n                        } catch (Exception e) {\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void setRateItem(RateReason reason) {\r\n        rateModel.setReason(reason.getId());\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    public void onAttachmentSuccess(MessageModel messageModel) {\r\n        messageModelList.add(messageModel);\r\n        adapter.notifyItemChanged(messageModelList.size());\r\n        binding.recView.postDelayed(() -> binding.recView.smoothScrollToPosition(messageModelList.size() - 1), 200);\r\n        isNewMessage = true;\r\n        if (Integer.parseInt(messageModel.getFrom_user_id()) == userModel.getUser().getId()) {\r\n            deleteFile();\r\n\r\n        }\r\n        getOrderById(null);\r\n    }\r\n    @Subscribe\r\n    public void onOrderUpdated(NotFireModel notFireModel){\r\n        isFromFireBase = true;\r\n        getOrderById(null);\r\n    }\r\n    private void deleteFile() {\r\n        try {\r\n            if (!audio_path.isEmpty()) {\r\n                File file = new File(audio_path);\r\n                if (file.exists()) {\r\n                    file.delete();\r\n                }\r\n            }\r\n        }catch (Exception e){}\r\n\r\n    }\r\n\r\n\r\n    private void getOffers() {\r\n\r\n        Api.getService(Tags.base_url).getClientOffers(userModel.getUser().getToken(), userModel.getUser().getId(), order_id, 1, \"on\", 10)\r\n                .enqueue(new Callback<OffersDataModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<OffersDataModel> call, Response<OffersDataModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            offersModelList.clear();\r\n                            if (response.body() != null) {\r\n                                offer_current_page = response.body().getCurrent_page();\r\n                                binding.llOfferData.setVisibility(View.GONE);\r\n                                updateDataDistance(response.body().getData(), false);\r\n\r\n\r\n                            }\r\n                        } else {\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<OffersDataModel> call, Throwable t) {\r\n                        try {\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    private void loadMoreOffer(int page) {\r\n        offersModelList.add(null);\r\n        offersAdapter.notifyItemInserted(offersModelList.size() - 1);\r\n        offer_isLoading = true;\r\n\r\n        Api.getService(Tags.base_url).getClientOffers(userModel.getUser().getToken(), userModel.getUser().getId(), order_id, page, \"on\", 10)\r\n                .enqueue(new Callback<OffersDataModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<OffersDataModel> call, Response<OffersDataModel> response) {\r\n                        offer_isLoading = false;\r\n                        if (offersModelList.get(offersModelList.size() - 1) == null) {\r\n                            offersModelList.remove(offersModelList.size() - 1);\r\n                            offersAdapter.notifyItemRemoved(offersModelList.size() - 1);\r\n                        }\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n\r\n                                if (response.body().getData().size() > 0) {\r\n                                    offer_current_page = response.body().getCurrent_page();\r\n                                    updateDataDistance(response.body().getData(), true);\r\n                                }\r\n\r\n\r\n                            }\r\n                        } else {\r\n                            offer_isLoading = false;\r\n                            if (offersModelList.get(offersModelList.size() - 1) == null) {\r\n                                offersModelList.remove(offersModelList.size() - 1);\r\n                                offersAdapter.notifyItemRemoved(offersModelList.size() - 1);\r\n                            }\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<OffersDataModel> call, Throwable t) {\r\n                        offer_isLoading = false;\r\n                        if (offersModelList.get(offersModelList.size() - 1) == null) {\r\n                            offersModelList.remove(offersModelList.size() - 1);\r\n                            offersAdapter.notifyItemRemoved(offersModelList.size() - 1);\r\n                        }\r\n                        try {\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(ChatActivity.this, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void updateDataDistance(List<OffersModel> data, boolean isLoadMore) {\r\n        LatLng place_location = new LatLng(Double.parseDouble(orderModel.getMarket_latitude()), Double.parseDouble(orderModel.getMarket_longitude()));\r\n        for (int index = 0; index < data.size(); index++) {\r\n            OffersModel offersModel = data.get(index);\r\n            offersModel.setDistance(calculateDistance(place_location, new LatLng(Double.parseDouble(offersModel.getDriver().getLatitude()), Double.parseDouble(offersModel.getDriver().getLongitude()))));\r\n            offersModel.setOrder_time(orderModel.getOrder_time_arrival());\r\n            data.set(index, offersModel);\r\n        }\r\n\r\n        if (!isLoadMore) {\r\n            offersModelList.clear();\r\n            offersModelList.addAll(data);\r\n            offersAdapter.notifyDataSetChanged();\r\n        } else {\r\n            int old_pos = offersModelList.size() - 1;\r\n            offersModelList.addAll(data);\r\n            int new_pos = offersModelList.size();\r\n            offersAdapter.notifyItemRangeInserted(old_pos, new_pos);\r\n        }\r\n    }\r\n\r\n    private String calculateDistance(LatLng latLng1, LatLng latLng2) {\r\n        return String.format(Locale.ENGLISH, \"%s %s\", String.format(Locale.ENGLISH, \"%.2f\", (SphericalUtil.computeDistanceBetween(latLng1, latLng2) / 1000)), getString(R.string.km));\r\n\r\n    }\r\n\r\n    private double getDistance(LatLng latLng1, LatLng latLng2) {\r\n        return SphericalUtil.computeDistanceBetween(latLng1, latLng2) / 1000;\r\n    }\r\n\r\n    private void createMediaRecorder() {\r\n\r\n        String audio_name = \"AUD\" + System.currentTimeMillis() + \".mp3\";\r\n\r\n        File file = new File(Tags.audio_path);\r\n        boolean isFolderCreate;\r\n\r\n        if (!file.exists()) {\r\n            isFolderCreate = file.mkdir();\r\n        } else {\r\n            isFolderCreate = true;\r\n        }\r\n\r\n\r\n        if (isFolderCreate) {\r\n            startTimer();\r\n            binding.recordTime.setVisibility(View.VISIBLE);\r\n           // createVibration();\r\n            audio_path = file.getAbsolutePath() + \"/\" + audio_name;\r\n            recorder = new MediaRecorder();\r\n            recorder.setAudioSource(MediaRecorder.AudioSource.MIC);\r\n            recorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);\r\n            recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);\r\n            recorder.setAudioChannels(1);\r\n            recorder.setOutputFile(audio_path);\r\n            try {\r\n                recorder.prepare();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            recorder.start();\r\n        } else {\r\n            Toast.makeText(this, \"Unable to create sound file on your device\", Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void createVibration() {\r\n        Vibrator vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            if (vibrator != null) {\r\n                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE));\r\n\r\n            }\r\n        } else {\r\n            if (vibrator != null) {\r\n                vibrator.vibrate(new long[]{200, 200}, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void checkCameraPermission() {\r\n        if (ActivityCompat.checkSelfPermission(this, CAMERA_PERM) == PackageManager.PERMISSION_GRANTED &&\r\n                ActivityCompat.checkSelfPermission(this, WRITE_PERM) == PackageManager.PERMISSION_GRANTED) {\r\n            selectImage(CAMERA_REQ);\r\n\r\n        } else {\r\n\r\n            ActivityCompat.requestPermissions(this, new String[]{CAMERA_PERM, WRITE_PERM}, CAMERA_REQ);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void checkGalleryPermission() {\r\n        if (ActivityCompat.checkSelfPermission(this, READ_PERM) == PackageManager.PERMISSION_GRANTED) {\r\n            selectImage(IMG_REQ);\r\n\r\n        } else {\r\n            ActivityCompat.requestPermissions(this, new String[]{READ_PERM}, IMG_REQ);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void checkMicPermission() {\r\n        if (ActivityCompat.checkSelfPermission(this, MIC_PERM) != PackageManager.PERMISSION_GRANTED ||\r\n                ActivityCompat.checkSelfPermission(this, WRITE_PERM) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(this, new String[]{MIC_PERM, WRITE_PERM}, MIC_REQ);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean isMicReady() {\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, MIC_PERM) == PackageManager.PERMISSION_GRANTED &&\r\n                ActivityCompat.checkSelfPermission(this, WRITE_PERM) == PackageManager.PERMISSION_GRANTED) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    private void selectImage(int req) {\r\n\r\n        Intent intent = new Intent();\r\n        if (req == IMG_REQ) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\r\n                intent.setAction(Intent.ACTION_OPEN_DOCUMENT);\r\n                intent.setFlags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);\r\n\r\n            } else {\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n\r\n\r\n            }\r\n            intent.setType(\"image/*\");\r\n\r\n\r\n        } else if (req == CAMERA_REQ) {\r\n\r\n            intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n        }\r\n\r\n        startActivityForResult(intent, req);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == IMG_REQ) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                selectImage(requestCode);\r\n            } else {\r\n                Toast.makeText(this, \"Access image denied\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } else if (requestCode == CAMERA_REQ) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {\r\n                selectImage(requestCode);\r\n            } else {\r\n                Toast.makeText(this, \"Access camera denied\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } else if (requestCode == MIC_REQ) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {\r\n            } else {\r\n                Toast.makeText(this, \"Access camera denied\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        if (requestCode == IMG_REQ && resultCode == RESULT_OK && data != null) {\r\n            Uri uri = data.getData();\r\n            sendAttachment(uri.toString(),\"\", \"image\");\r\n\r\n        } else if (requestCode == CAMERA_REQ && resultCode == RESULT_OK && data != null) {\r\n\r\n            Bitmap bitmap = (Bitmap) data.getExtras().get(\"data\");\r\n\r\n            Uri uri = getUriFromBitmap(bitmap);\r\n            sendAttachment(uri.toString(),\"\", \"image\");\r\n\r\n        } else if (requestCode == 100 && resultCode == RESULT_OK) {\r\n            binding.tvReadyDeliverOrder.setVisibility(View.GONE);\r\n            getOrderById(null);\r\n        }else if (requestCode==200&&resultCode==RESULT_OK&&data!=null){\r\n            List<MessageModel> list = (List<MessageModel>) data.getSerializableExtra(\"data\");\r\n            int oldPos = messageModelList.size()-1;\r\n            messageModelList.addAll(list);\r\n            int newPos = messageModelList.size();\r\n            adapter.notifyItemRangeChanged(oldPos,newPos);\r\n            binding.recView.postDelayed(() -> binding.recView.smoothScrollToPosition(messageModelList.size() - 1), 200);\r\n            orderModel.setOrder_status(\"bill_attach\");\r\n            binding.setModel(orderModel);\r\n            loadData = false;\r\n            updateUi(orderModel);\r\n            isDataChanged = true;\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private Uri getUriFromBitmap(Bitmap bitmap) {\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, 90, outputStream);\r\n        return Uri.parse(MediaStore.Images.Media.insertImage(getContentResolver(), bitmap, \"\", \"\"));\r\n\r\n    }\r\n\r\n    private void startTimer() {\r\n        handler = new Handler();\r\n        runnable = () -> {\r\n            audio_total_seconds += 1;\r\n            binding.recordTime.setText(getRecordTimeFormat(audio_total_seconds));\r\n            startTimer();\r\n        };\r\n\r\n        handler.postDelayed(runnable, 1000);\r\n    }\r\n\r\n    private void stopTimer() {\r\n        if (recorder != null) {\r\n            recorder.release();\r\n            recorder = null;\r\n        }\r\n        audio_total_seconds = 0;\r\n        if (runnable != null) {\r\n            handler.removeCallbacks(runnable);\r\n\r\n        }\r\n        handler = null;\r\n        binding.recordTime.setText(\"00:00:00\");\r\n        binding.recordTime.setVisibility(View.GONE);\r\n    }\r\n\r\n    private String getRecordTimeFormat(long seconds) {\r\n        int hours = (int) (seconds / 3600);\r\n        int minutes = (int) ((seconds % 3600) / 60);\r\n        int second = (int) (seconds % 60);\r\n\r\n        return String.format(Locale.ENGLISH, \"%02d:%02d:%02d\", hours, minutes, second);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (binding.flAction.getVisibility()==View.VISIBLE){\r\n            closeSheet();\r\n        }else if (binding.flDriverAction.getVisibility()==View.VISIBLE){\r\n            closeDriverActionSheet();\r\n        }else if (binding.flRate.getVisibility()==View.VISIBLE){\r\n            closeRateActionSheet();\r\n        }else {\r\n            setResult(RESULT_OK);\r\n            finish();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        if (EventBus.getDefault().isRegistered(this)){\r\n            EventBus.getDefault().unregister(this);\r\n        }\r\n        preferences.create_chat_user_id(this,\"\");\r\n    }\r\n\r\n    public void setLocationItem(MessageModel model) {\r\n        String address =\"\";\r\n        double lat = 0.0;\r\n        double lng = 0.0;\r\n        if (model.getType().equals(\"from_location\")){\r\n            address = orderModel.getClient_address();\r\n            lat = Double.parseDouble(orderModel.getClient_latitude());\r\n            lng = Double.parseDouble(orderModel.getClient_longitude());\r\n        }else {\r\n            address = orderModel.getMarket_address();\r\n            lat = Double.parseDouble(orderModel.getMarket_latitude());\r\n            lng = Double.parseDouble(orderModel.getMarket_longitude());\r\n        }\r\n\r\n        Intent intent = new Intent(this, MapShowLocationActivity.class);\r\n        intent.putExtra(\"address\",address);\r\n        intent.putExtra(\"lat\",lat);\r\n        intent.putExtra(\"lng\",lng);\r\n        startActivity(intent);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/apps/emdad/activities_fragments/activity_chat/ChatActivity.java	(revision f324eaf22b0ba3077fc7138cccc63de6ad38dd43)
+++ app/src/main/java/com/apps/emdad/activities_fragments/activity_chat/ChatActivity.java	(date 1606898746130)
@@ -259,7 +259,7 @@
                         changeDriver(chatActionModel);
                         break;
                     case 3:
-                        if (chatActionModel.getAction().equals("سعر التوصيل مرتفع")) {
+                        if (chatActionModel.getAction().equals(getString(R.string.delv_is_high))) {
                             if (offersModel != null) {
 
                                 if (Double.parseDouble(offersModel.getOffer_value()) > Double.parseDouble(offersModel.getMin_offer())) {
@@ -275,7 +275,7 @@
 
                             }
 
-                        } else if (chatActionModel.getAction().equals("لم اعد احتاج الطلب") || chatActionModel.getAction().equals("سبب آخر")) {
+                        } else if (chatActionModel.getAction().equals(getString(R.string.no_need_order)) || chatActionModel.getAction().equals(getString(R.string.another_reason))) {
                             deleteOrder(chatActionModel);
 
                         } else {
@@ -1013,9 +1013,9 @@
         reasonType = 1;
         binding.tvActionType.setText(R.string.withdraw_order);
         actionReasonList.clear();
-        ChatActionModel chatActionModel1 = new ChatActionModel("موقع المتجر بعيد");
+        ChatActionModel chatActionModel1 = new ChatActionModel(getString(R.string.shop_location_remote));
         actionReasonList.add(chatActionModel1);
-        ChatActionModel chatActionModel2 = new ChatActionModel("لا أرغب في توصيل الطلب");
+        ChatActionModel chatActionModel2 = new ChatActionModel(getString(R.string.I_do_not_wish_deliver_order));
         actionReasonList.add(chatActionModel2);
         chatActionAdapter.notifyDataSetChanged();
         openSheet();
@@ -1024,7 +1024,7 @@
 
     private void changeDriverActions() {
         reasonType = 2;
-        binding.tvActionType.setText(R.string.change_driver);
+        /*binding.tvActionType.setText(R.string.change_driver);
         actionReasonList.clear();
         ChatActionModel chatActionModel1 = new ChatActionModel("المندوب غير مناسب");
         actionReasonList.add(chatActionModel1);
@@ -1034,7 +1034,7 @@
         actionReasonList.add(chatActionModel3);
         ChatActionModel chatActionModel4 = new ChatActionModel("سبب آخر");
         actionReasonList.add(chatActionModel4);
-        chatActionAdapter.notifyDataSetChanged();
+        chatActionAdapter.notifyDataSetChanged();*/
         openSheet();
     }
 
@@ -1045,21 +1045,21 @@
         reasonType = 3;
         binding.tvActionType.setText(R.string.delete_order);
         actionReasonList.clear();
-        ChatActionModel chatActionModel1 = new ChatActionModel("الطلب متأخر والمندوب لا يجيب");
+        ChatActionModel chatActionModel1 = new ChatActionModel(getString(R.string.the_request_dosnot_answer));
         actionReasonList.add(chatActionModel1);
-        ChatActionModel chatActionModel2 = new ChatActionModel("المندوب طلب التواصل خارج التطبيق");
+        ChatActionModel chatActionModel2 = new ChatActionModel(getString(R.string.delegate_requested_communication_outside_application));
         actionReasonList.add(chatActionModel2);
-        ChatActionModel chatActionModel3 = new ChatActionModel("المندوب غير جاد");
+        ChatActionModel chatActionModel3 = new ChatActionModel(getString(R.string.delegate_isnot_serious));
         actionReasonList.add(chatActionModel3);
-        ChatActionModel chatActionModel4 = new ChatActionModel("المندوب طلب الإلغاء");
+        ChatActionModel chatActionModel4 = new ChatActionModel(getString(R.string.delegate_requet_cancel));
         actionReasonList.add(chatActionModel4);
-        ChatActionModel chatActionModel5 = new ChatActionModel("المندوب لم يقبل الدفع الالكتروني");
+        ChatActionModel chatActionModel5 = new ChatActionModel(getString(R.string.delegate_refuse_online_payment));
         actionReasonList.add(chatActionModel5);
-        ChatActionModel chatActionModel6 = new ChatActionModel("تغيير المندوب");
+        ChatActionModel chatActionModel6 = new ChatActionModel(getString(R.string.change_delegate));
         actionReasonList.add(chatActionModel6);
-        ChatActionModel chatActionModel7 = new ChatActionModel("لم اعد احتاج الطلب");
+        ChatActionModel chatActionModel7 = new ChatActionModel(getString(R.string.no_need_order));
         actionReasonList.add(chatActionModel7);
-        ChatActionModel chatActionModel8 = new ChatActionModel("سبب آخر");
+        ChatActionModel chatActionModel8 = new ChatActionModel(getString(R.string.another_reason));
         actionReasonList.add(chatActionModel8);
         chatActionAdapter.notifyDataSetChanged();
 
@@ -1071,11 +1071,11 @@
         reasonType = 3;
         binding.tvActionType.setText(R.string.delete_order);
         actionReasonList.clear();
-        ChatActionModel chatActionModel1 = new ChatActionModel("سعر التوصيل مرتفع");
+        ChatActionModel chatActionModel1 = new ChatActionModel(getString(R.string.delv_is_high));
         actionReasonList.add(chatActionModel1);
-        ChatActionModel chatActionModel2 = new ChatActionModel("لم اعد احتاج الطلب");
+        ChatActionModel chatActionModel2 = new ChatActionModel(getString(R.string.no_need_order));
         actionReasonList.add(chatActionModel2);
-        ChatActionModel chatActionModel3 = new ChatActionModel("سبب آخر");
+        ChatActionModel chatActionModel3 = new ChatActionModel(getString(R.string.another_reason));
         actionReasonList.add(chatActionModel3);
         chatActionAdapter.notifyDataSetChanged();
         openSheet();
@@ -2145,20 +2145,6 @@
 
     }
 
-    private void createVibration() {
-        Vibrator vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            if (vibrator != null) {
-                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE));
-
-            }
-        } else {
-            if (vibrator != null) {
-                vibrator.vibrate(new long[]{200, 200}, 0);
-            }
-        }
-    }
-
     private void checkCameraPermission() {
         if (ActivityCompat.checkSelfPermission(this, CAMERA_PERM) == PackageManager.PERMISSION_GRANTED &&
                 ActivityCompat.checkSelfPermission(this, WRITE_PERM) == PackageManager.PERMISSION_GRANTED) {
Index: app/src/main/java/com/apps/emdad/activities_fragments/activity_home/fragments/Fragment_Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.apps.emdad.activities_fragments.activity_home.fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.apps.emdad.R;\r\nimport com.apps.emdad.activities_fragments.activity_chat.ChatActivity;\r\nimport com.apps.emdad.activities_fragments.activity_home.HomeActivity;\r\nimport com.apps.emdad.activities_fragments.activity_old_orders.OldOrdersActivity;\r\nimport com.apps.emdad.adapters.OrdersAdapter;\r\nimport com.apps.emdad.adapters.RateReasonAdapter;\r\nimport com.apps.emdad.databinding.FragmentOrdersBinding;\r\nimport com.apps.emdad.models.OrderModel;\r\nimport com.apps.emdad.models.OrdersDataModel;\r\nimport com.apps.emdad.models.RateModel;\r\nimport com.apps.emdad.models.RateReason;\r\nimport com.apps.emdad.models.UserModel;\r\nimport com.apps.emdad.preferences.Preferences;\r\nimport com.apps.emdad.remote.Api;\r\nimport com.apps.emdad.share.Common;\r\nimport com.apps.emdad.tags.Tags;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport okhttp3.ResponseBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class Fragment_Order extends Fragment {\r\n    private FragmentOrdersBinding binding;\r\n    private HomeActivity activity;\r\n    private OrdersAdapter adapter;\r\n    private List<OrderModel> orderModelList;\r\n    private int current_page = 1;\r\n    private boolean isLoading = false;\r\n    private Preferences preferences;\r\n    private UserModel userModel;\r\n    private Call<OrdersDataModel> loadMoreCall;\r\n    private RateReasonAdapter rateReasonAdapter;\r\n    private RateModel rateModel;\r\n    private OrderModel orderModel;\r\n    private int pos = -1;\r\n\r\n\r\n    public static Fragment_Order newInstance() {\r\n        return new Fragment_Order();\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_orders, container, false);\r\n        initView();\r\n        return binding.getRoot();\r\n\r\n    }\r\n\r\n    private void initView() {\r\n        rateModel = new RateModel();\r\n        activity = (HomeActivity) getActivity();\r\n        preferences = Preferences.getInstance();\r\n        userModel = preferences.getUserData(activity);\r\n        orderModelList = new ArrayList<>();\r\n        binding.swipeRefresh.setColorSchemeColors(ContextCompat.getColor(activity, R.color.colorPrimary));\r\n        binding.recView.setLayoutManager(new LinearLayoutManager(activity));\r\n        adapter = new OrdersAdapter(orderModelList, activity, this);\r\n        binding.recView.setAdapter(adapter);\r\n        binding.recView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                if (dy > 0) {\r\n                    LinearLayoutManager manager = (LinearLayoutManager) binding.recView.getLayoutManager();\r\n                    int last_item_pos = manager.findLastCompletelyVisibleItemPosition();\r\n                    int total_items_count = binding.recView.getAdapter().getItemCount();\r\n                    if (last_item_pos == (total_items_count - 2) && !isLoading) {\r\n                        int page = current_page + 1;\r\n                        loadMore(page);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.flOldOrders.setOnClickListener(v -> {\r\n            binding.flRate.setVisibility(View.GONE);\r\n            Intent intent = new Intent(activity, OldOrdersActivity.class);\r\n            startActivityForResult(intent, 100);\r\n        });\r\n\r\n        binding.recViewRateReason.setLayoutManager(new GridLayoutManager(activity,2));\r\n        rateReasonAdapter = new RateReasonAdapter(new ArrayList<>(),activity,this);\r\n        binding.recViewRateReason.setAdapter(rateReasonAdapter);\r\n        binding.swipeRefresh.setOnRefreshListener(this::getOrders);\r\n        binding.btnRate.setOnClickListener(v -> {\r\n            String comment = binding.edtRateComment.getText().toString();\r\n            rateModel.setComment(comment);\r\n            closeRateActionSheet();\r\n            binding.flRate.setVisibility(View.GONE);\r\n            rate();\r\n        });\r\n\r\n        binding.tvNotNow.setOnClickListener(v -> closeRateActionSheet());\r\n        binding.swipeRefresh.setOnRefreshListener(this::getOrders);\r\n        binding.btnBack.setOnClickListener(v -> activity.displayFragmentMain());\r\n        binding.imageCloseSheet.setOnClickListener(v -> closeRateActionSheet());\r\n        getOrders();\r\n    }\r\n\r\n    public void getOrders() {\r\n        if (loadMoreCall != null) {\r\n            loadMoreCall.cancel();\r\n            if (orderModelList.size() > 0 && orderModelList.get(orderModelList.size() - 1) == null) {\r\n                orderModelList.remove(orderModelList.size() - 1);\r\n                adapter.notifyItemRemoved(orderModelList.size() - 1);\r\n            }\r\n        }\r\n        Api.getService(Tags.base_url).getClientOrder(userModel.getUser().getToken(), userModel.getUser().getId(), \"current\", 1, \"on\", 20)\r\n                .enqueue(new Callback<OrdersDataModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<OrdersDataModel> call, Response<OrdersDataModel> response) {\r\n                        binding.prgBar.setVisibility(View.GONE);\r\n                        binding.swipeRefresh.setRefreshing(false);\r\n\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                orderModelList.clear();\r\n\r\n                                if (response.body().getData().size() > 0) {\r\n                                    binding.llNoOrder.setVisibility(View.GONE);\r\n                                    orderModelList.addAll(response.body().getData());\r\n                                    current_page = response.body().getCurrent_page();\r\n                                } else {\r\n                                    binding.llNoOrder.setVisibility(View.VISIBLE);\r\n\r\n                                }\r\n\r\n                                adapter.notifyDataSetChanged();\r\n\r\n\r\n\r\n                            }\r\n                        } else {\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<OrdersDataModel> call, Throwable t) {\r\n                        binding.prgBar.setVisibility(View.GONE);\r\n                        try {\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(activity, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(activity, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    private void loadMore(int page) {\r\n        orderModelList.add(null);\r\n        adapter.notifyItemInserted(orderModelList.size() - 1);\r\n        isLoading = true;\r\n\r\n        loadMoreCall = Api.getService(Tags.base_url).getClientOrder(userModel.getUser().getToken(), userModel.getUser().getId(), \"current\", page, \"on\", 20);\r\n        loadMoreCall.enqueue(new Callback<OrdersDataModel>() {\r\n            @Override\r\n            public void onResponse(Call<OrdersDataModel> call, Response<OrdersDataModel> response) {\r\n                isLoading = false;\r\n                if (orderModelList.get(orderModelList.size() - 1) == null) {\r\n                    orderModelList.remove(orderModelList.size() - 1);\r\n                    adapter.notifyItemRemoved(orderModelList.size() - 1);\r\n                }\r\n                if (response.isSuccessful()) {\r\n                    if (response.body() != null && response.body().getData().size() > 0) {\r\n                        current_page = response.body().getCurrent_page();\r\n                        int old_pos = orderModelList.size() - 1;\r\n                        orderModelList.addAll(response.body().getData());\r\n                        int new_pos = orderModelList.size();\r\n                        adapter.notifyItemRangeInserted(old_pos, new_pos);\r\n\r\n                    }\r\n\r\n                } else {\r\n                    isLoading = false;\r\n                    if (orderModelList.get(orderModelList.size() - 1) == null) {\r\n                        orderModelList.remove(orderModelList.size() - 1);\r\n                        adapter.notifyItemRemoved(orderModelList.size() - 1);\r\n                    }\r\n                    try {\r\n                        Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<OrdersDataModel> call, Throwable t) {\r\n                isLoading = false;\r\n                if (orderModelList.get(orderModelList.size() - 1) == null) {\r\n                    orderModelList.remove(orderModelList.size() - 1);\r\n                    adapter.notifyItemRemoved(orderModelList.size() - 1);\r\n                }\r\n                try {\r\n                    if (t.getMessage() != null) {\r\n                        Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                        if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                            Toast.makeText(activity, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                        } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                        } else {\r\n                            Toast.makeText(activity, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n\r\n\r\n                } catch (Exception e) {\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setItemData(OrderModel orderModel1) {\r\n        binding.flRate.setVisibility(View.GONE);\r\n        Intent intent = new Intent(activity, ChatActivity.class);\r\n        intent.putExtra(\"order_id\", orderModel1.getId());\r\n        startActivityForResult(intent, 100);\r\n    }\r\n\r\n    private void rate1UI(){\r\n        if (orderModel!=null&&orderModel.getDriver()!=null){\r\n            Picasso.get().load(Uri.parse(Tags.IMAGE_URL+orderModel.getDriver().getLogo())).placeholder(R.drawable.user_avatar).into(binding.driverImage);\r\n\r\n        }\r\n        binding.emoji1.setImageResource(R.drawable.sad2);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(activity,R.color.black));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(1,\"يعاكس\",false));\r\n        rateReasonList.add(new RateReason(2,\"غير مهزب\",false));\r\n        rateReasonList.add(new RateReason(3,\"مدخن\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonList.add(new RateReason(5,\"غير ملتزم بالتعليمات الصحية\",false));\r\n        rateReasonAdapter.addData(rateReasonList);\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(1);\r\n\r\n\r\n    }\r\n    private void rate2UI(){\r\n        if (orderModel!=null&&orderModel.getDriver()!=null){\r\n            Picasso.get().load(Uri.parse(Tags.IMAGE_URL+orderModel.getDriver().getLogo())).placeholder(R.drawable.user_avatar).into(binding.driverImage);\r\n\r\n        }\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad2);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(activity,R.color.black));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(1,\"يعاكس\",false));\r\n        rateReasonList.add(new RateReason(2,\"غير مهزب\",false));\r\n        rateReasonList.add(new RateReason(3,\"مدخن\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonList.add(new RateReason(5,\"غير ملتزم بالتعليمات الصحية\",false));\r\n        rateReasonAdapter.addData(rateReasonList);\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(2);\r\n\r\n    }\r\n    private void rate3UI(){\r\n        if (orderModel!=null&&orderModel.getDriver()!=null){\r\n            Picasso.get().load(Uri.parse(Tags.IMAGE_URL+orderModel.getDriver().getLogo())).placeholder(R.drawable.user_avatar).into(binding.driverImage);\r\n\r\n        }\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad4);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(activity,R.color.black));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(1,\"يعاكس\",false));\r\n        rateReasonList.add(new RateReason(2,\"غير مهزب\",false));\r\n        rateReasonList.add(new RateReason(3,\"مدخن\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonList.add(new RateReason(5,\"غير ملتزم بالتعليمات الصحية\",false));\r\n        rateReasonAdapter.addData(rateReasonList);\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(3);\r\n\r\n\r\n    }\r\n    private void rate4UI(){\r\n        if (orderModel!=null&&orderModel.getDriver()!=null){\r\n            Picasso.get().load(Uri.parse(Tags.IMAGE_URL+orderModel.getDriver().getLogo())).placeholder(R.drawable.user_avatar).into(binding.driverImage);\r\n\r\n        }\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile2);\r\n        binding.emoji5.setImageResource(R.drawable.smile3);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.black));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(6,\"يضايق\",false));\r\n        rateReasonList.add(new RateReason(4,\"متأخر\",false));\r\n        rateReasonAdapter.addData(rateReasonList);\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(4);\r\n\r\n\r\n    }\r\n    private void rate5UI(){\r\n        if (orderModel!=null&&orderModel.getDriver()!=null){\r\n            Picasso.get().load(Uri.parse(Tags.IMAGE_URL+orderModel.getDriver().getLogo())).placeholder(R.drawable.user_avatar).into(binding.driverImage);\r\n\r\n        }\r\n        binding.emoji1.setImageResource(R.drawable.sad1);\r\n        binding.emoji2.setImageResource(R.drawable.sad1);\r\n        binding.emoji3.setImageResource(R.drawable.sad3);\r\n        binding.emoji4.setImageResource(R.drawable.smile1);\r\n        binding.emoji5.setImageResource(R.drawable.smile4);\r\n        binding.tv1.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv2.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv3.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));\r\n        binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.black));\r\n        List<RateReason> rateReasonList = new ArrayList<>();\r\n        rateReasonList.add(new RateReason(7,\"خدمة سريعة\",false));\r\n        rateReasonList.add(new RateReason(8,\"محترم\",false));\r\n        rateReasonList.add(new RateReason(9,\"إحترافي\",false));\r\n        rateReasonList.add(new RateReason(10,\"متجاوب\",false));\r\n        rateReasonAdapter.addData(rateReasonList);\r\n        binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);\r\n        binding.btnRate.setText(getString(R.string.send));\r\n        rateModel.setRate(5);\r\n\r\n\r\n    }\r\n\r\n\r\n    public void updateRateUi(OrderModel orderModel, int adapterPosition, int emoji) {\r\n        openRateSheet();\r\n        this.pos =adapterPosition;\r\n        this.orderModel = orderModel;\r\n        switch (emoji){\r\n            case 1:\r\n                rate1UI();\r\n                break;\r\n            case 2:\r\n                rate2UI();\r\n                break;\r\n            case 3:\r\n                rate3UI();\r\n                break;\r\n            case 4:\r\n                rate4UI();\r\n                break;\r\n            case 5:\r\n                rate5UI();\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    public void setRateItem(RateReason reason) {\r\n        rateModel.setReason(reason.getId());\r\n\r\n    }\r\n\r\n    private void rate() {\r\n\r\n        ProgressDialog dialog = Common.createProgressDialog(activity, getString(R.string.wait));\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Api.getService(Tags.base_url).clientRate(userModel.getUser().getToken(), orderModel.getDriver().getId(), orderModel.getClient().getId(), orderModel.getId(), rateModel.getRate(),rateModel.getReason(),rateModel.getComment())\r\n                .enqueue(new Callback<ResponseBody>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                        dialog.dismiss();\r\n                        if (response.isSuccessful()) {\r\n                            if (response.body() != null) {\r\n                                if (pos!=-1){\r\n                                    orderModelList.remove(pos);\r\n                                    adapter.notifyItemRemoved(pos);\r\n                                    if (orderModelList.size()>0){\r\n                                        binding.llNoOrder.setVisibility(View.GONE);\r\n                                    }else {\r\n                                        binding.llNoOrder.setVisibility(View.VISIBLE);\r\n\r\n                                    }\r\n                                    pos = -1;\r\n                                    orderModel = null;\r\n\r\n                                }\r\n                            }\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            try {\r\n                                Log.e(\"error_code\", response.code() + response.errorBody().string());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                            if (t.getMessage() != null) {\r\n                                Log.e(\"error\", t.getMessage() + \"__\");\r\n\r\n                                if (t.getMessage().toLowerCase().contains(\"failed to connect\") || t.getMessage().toLowerCase().contains(\"unable to resolve host\")) {\r\n                                    Toast.makeText(activity, getString(R.string.something), Toast.LENGTH_SHORT).show();\r\n                                } else if (t.getMessage().toLowerCase().contains(\"socket\") || t.getMessage().toLowerCase().contains(\"canceled\")) {\r\n                                } else {\r\n                                    Toast.makeText(activity, getString(R.string.failed), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n\r\n\r\n                        } catch (Exception e) {\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n    }\r\n\r\n    private void openRateSheet() {\r\n\r\n        binding.flRate.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(activity, R.anim.slide_up);\r\n        binding.flRate.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n                binding.flRate.setVisibility(View.VISIBLE);\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void closeRateActionSheet() {\r\n\r\n        binding.flRate.clearAnimation();\r\n        Animation animation = AnimationUtils.loadAnimation(activity, R.anim.slide_down);\r\n        binding.flRate.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n                binding.flRate.setVisibility(View.GONE);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == 100 && resultCode == Activity.RESULT_OK) {\r\n            Log.e(\"fff\",\"fff\");\r\n            getOrders();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        closeRateActionSheet();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/apps/emdad/activities_fragments/activity_home/fragments/Fragment_Order.java	(revision f324eaf22b0ba3077fc7138cccc63de6ad38dd43)
+++ app/src/main/java/com/apps/emdad/activities_fragments/activity_home/fragments/Fragment_Order.java	(date 1606899728487)
@@ -287,11 +287,11 @@
         binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         List<RateReason> rateReasonList = new ArrayList<>();
-        rateReasonList.add(new RateReason(1,"يعاكس",false));
-        rateReasonList.add(new RateReason(2,"غير مهزب",false));
-        rateReasonList.add(new RateReason(3,"مدخن",false));
-        rateReasonList.add(new RateReason(4,"متأخر",false));
-        rateReasonList.add(new RateReason(5,"غير ملتزم بالتعليمات الصحية",false));
+        rateReasonList.add(new RateReason(1,getString(R.string.flirt),false));
+        rateReasonList.add(new RateReason(2,getString(R.string.rude),false));
+        rateReasonList.add(new RateReason(3,getString(R.string.smoked),false));
+        rateReasonList.add(new RateReason(4,getString(R.string.late),false));
+        rateReasonList.add(new RateReason(5,getString(R.string.not_adhering),false));
         rateReasonAdapter.addData(rateReasonList);
         binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);
         binding.btnRate.setText(getString(R.string.send));
@@ -315,11 +315,11 @@
         binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         List<RateReason> rateReasonList = new ArrayList<>();
-        rateReasonList.add(new RateReason(1,"يعاكس",false));
-        rateReasonList.add(new RateReason(2,"غير مهزب",false));
-        rateReasonList.add(new RateReason(3,"مدخن",false));
-        rateReasonList.add(new RateReason(4,"متأخر",false));
-        rateReasonList.add(new RateReason(5,"غير ملتزم بالتعليمات الصحية",false));
+        rateReasonList.add(new RateReason(1,getString(R.string.flirt),false));
+        rateReasonList.add(new RateReason(2,getString(R.string.rude),false));
+        rateReasonList.add(new RateReason(3,getString(R.string.smoked),false));
+        rateReasonList.add(new RateReason(4,getString(R.string.late),false));
+        rateReasonList.add(new RateReason(5,getString(R.string.not_adhering),false));
         rateReasonAdapter.addData(rateReasonList);
         binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);
         binding.btnRate.setText(getString(R.string.send));
@@ -342,11 +342,11 @@
         binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         List<RateReason> rateReasonList = new ArrayList<>();
-        rateReasonList.add(new RateReason(1,"يعاكس",false));
-        rateReasonList.add(new RateReason(2,"غير مهزب",false));
-        rateReasonList.add(new RateReason(3,"مدخن",false));
-        rateReasonList.add(new RateReason(4,"متأخر",false));
-        rateReasonList.add(new RateReason(5,"غير ملتزم بالتعليمات الصحية",false));
+        rateReasonList.add(new RateReason(1,getString(R.string.flirt),false));
+        rateReasonList.add(new RateReason(2,getString(R.string.rude),false));
+        rateReasonList.add(new RateReason(3,getString(R.string.smoked),false));
+        rateReasonList.add(new RateReason(4,getString(R.string.late),false));
+        rateReasonList.add(new RateReason(5,getString(R.string.not_adhering),false));
         rateReasonAdapter.addData(rateReasonList);
         binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);
         binding.btnRate.setText(getString(R.string.send));
@@ -370,8 +370,8 @@
         binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.black));
         binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         List<RateReason> rateReasonList = new ArrayList<>();
-        rateReasonList.add(new RateReason(6,"يضايق",false));
-        rateReasonList.add(new RateReason(4,"متأخر",false));
+        rateReasonList.add(new RateReason(6,getString(R.string.get_angry),false));
+        rateReasonList.add(new RateReason(4,getString(R.string.late),false));
         rateReasonAdapter.addData(rateReasonList);
         binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);
         binding.btnRate.setText(getString(R.string.send));
@@ -395,10 +395,10 @@
         binding.tv4.setTextColor(ContextCompat.getColor(activity,R.color.gray8));
         binding.tv5.setTextColor(ContextCompat.getColor(activity,R.color.black));
         List<RateReason> rateReasonList = new ArrayList<>();
-        rateReasonList.add(new RateReason(7,"خدمة سريعة",false));
-        rateReasonList.add(new RateReason(8,"محترم",false));
-        rateReasonList.add(new RateReason(9,"إحترافي",false));
-        rateReasonList.add(new RateReason(10,"متجاوب",false));
+        rateReasonList.add(new RateReason(7,getString(R.string.fast_service),false));
+        rateReasonList.add(new RateReason(8,getString(R.string.respectable),false));
+        rateReasonList.add(new RateReason(9,getString(R.string.professional),false));
+        rateReasonList.add(new RateReason(10,getString(R.string.responsive),false));
         rateReasonAdapter.addData(rateReasonList);
         binding.btnRate.setBackgroundResource(R.drawable.small_rounded_primary);
         binding.btnRate.setText(getString(R.string.send));
@@ -551,7 +551,6 @@
     public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
         if (requestCode == 100 && resultCode == Activity.RESULT_OK) {
-            Log.e("fff","fff");
             getOrders();
         }
     }
Index: app/src/main/java/com/apps/emdad/adapters/FeedbackAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.apps.emdad.adapters;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.PorterDuff;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.apps.emdad.R;\r\nimport com.apps.emdad.activities_fragments.activity_home.fragments.Fragment_Notifications;\r\nimport com.apps.emdad.activities_fragments.activity_user_feedback.UserFeedbackActivity;\r\nimport com.apps.emdad.databinding.FeedbackRowBinding;\r\nimport com.apps.emdad.databinding.LoadMoreRowBinding;\r\nimport com.apps.emdad.databinding.NotificationRowBinding;\r\nimport com.apps.emdad.models.FeedbackModel;\r\nimport com.apps.emdad.models.NotificationDataModel;\r\nimport com.apps.emdad.share.Time_Ago;\r\n\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class FeedbackAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\r\n    private final int DATA = 1;\r\n    private final int LOAD = 2;\r\n    private List<FeedbackModel> list;\r\n    private Context context;\r\n    private LayoutInflater inflater;\r\n    private UserFeedbackActivity activity;\r\n    private String userType;\r\n\r\n\r\n    public FeedbackAdapter(List<FeedbackModel> list, Context context,String userType) {\r\n        this.list = list;\r\n        this.context = context;\r\n        inflater = LayoutInflater.from(context);\r\n        activity = (UserFeedbackActivity) context;\r\n        this.userType = userType;\r\n    }\r\n\r\n\r\n    @NonNull\r\n    @Override\r\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n\r\n        if (viewType==DATA){\r\n            FeedbackRowBinding binding = DataBindingUtil.inflate(inflater, R.layout.feedback_row, parent, false);\r\n            return new MyHolder(binding);\r\n        }else {\r\n            LoadMoreRowBinding binding = DataBindingUtil.inflate(inflater, R.layout.load_more_row, parent, false);\r\n            return new LoadMoreHolder(binding);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder holder, int position) {\r\n\r\n        if (holder instanceof MyHolder){\r\n            MyHolder myHolder = (MyHolder) holder;\r\n            FeedbackModel feedbackModel= list.get(position);\r\n            myHolder.binding.setModel(feedbackModel);\r\n            myHolder.binding.setUserType(userType);\r\n            int rate = Integer.parseInt(feedbackModel.getRate());\r\n            myHolder.binding.rateBar.setRating(rate);\r\n            myHolder.binding.tvRate.setText(String.valueOf((double)rate));\r\n\r\n            String name =\"\";\r\n\r\n            Log.e(\"user_type\",userType);\r\n            if (userType.equals(\"driver\")){\r\n                if (feedbackModel.getDriver().getName().length()==2){\r\n                    name = feedbackModel.getClient().getName().substring(0,1)+\"**\";\r\n                }else if (feedbackModel.getClient().getName().length()>=3){\r\n                    String[] s = feedbackModel.getClient().getName().split(\" \");\r\n                    name = s[0].substring(0,2)+\"**\"+s[0].substring(s[0].length()-1);\r\n\r\n                }else {\r\n                    name = feedbackModel.getClient().getName();\r\n                }\r\n\r\n            }else {\r\n                name = feedbackModel.getDriver().getName();\r\n\r\n            }\r\n            myHolder.binding.tvName.setText(name);\r\n\r\n            if (feedbackModel.getComment()!=null&&!feedbackModel.getComment().isEmpty()){\r\n                myHolder.binding.llComment.setVisibility(View.VISIBLE);\r\n                myHolder.binding.tvComment.setText(feedbackModel.getComment());\r\n\r\n            }\r\n\r\n            if (feedbackModel.getReason()!=null&&!feedbackModel.getReason().isEmpty()){\r\n                myHolder.binding.llReason.setVisibility(View.VISIBLE);\r\n                String reason = feedbackModel.getReason();\r\n                switch (reason){\r\n                    case \"1\":\r\n                        myHolder.binding.tvReason.setText(\"يعاكس\");\r\n                        myHolder.binding.tvStatus.setText(R.string.someting_dont_like);\r\n                        break;\r\n                    case \"2\":\r\n                        myHolder.binding.tvReason.setText(\"غير مهذب\");\r\n                        myHolder.binding.tvStatus.setText(R.string.someting_dont_like);\r\n                        break;\r\n                    case \"3\":\r\n                        myHolder.binding.tvReason.setText(\"مدخن\");\r\n                        myHolder.binding.tvStatus.setText(R.string.someting_dont_like);\r\n\r\n                        break;\r\n                    case \"4\":\r\n                        myHolder.binding.tvReason.setText(\"متأخر\");\r\n                        myHolder.binding.tvStatus.setText(R.string.someting_dont_like);\r\n\r\n                        break;\r\n                    case \"5\":\r\n                        myHolder.binding.tvReason.setText(\"غير ملتزم بالتعليمات الصحية\");\r\n                        myHolder.binding.tvStatus.setText(R.string.someting_dont_like);\r\n\r\n                        break;\r\n                    case \"6\":\r\n                        myHolder.binding.tvReason.setText(\"يضايق\");\r\n                        myHolder.binding.tvStatus.setText(R.string.someting_dont_like);\r\n\r\n                        break;\r\n                    case \"7\":\r\n                        myHolder.binding.tvReason.setText(\"خدمة سريعة\");\r\n                        myHolder.binding.tvStatus.setText(R.string.something_you_like);\r\n\r\n\r\n                        break;\r\n                    case \"8\":\r\n                        myHolder.binding.tvReason.setText(\"محترم\");\r\n                        myHolder.binding.tvStatus.setText(R.string.something_you_like);\r\n\r\n                        break;\r\n                    case \"9\":\r\n                        myHolder.binding.tvReason.setText(\"إحترافي\");\r\n                        myHolder.binding.tvStatus.setText(R.string.something_you_like);\r\n\r\n                        break;\r\n                    case \"10\":\r\n                        myHolder.binding.tvReason.setText(\"متجاوب\");\r\n                        myHolder.binding.tvStatus.setText(R.string.something_you_like);\r\n\r\n                        break;\r\n                }\r\n            }\r\n\r\n        }else if (holder instanceof LoadMoreHolder){\r\n            LoadMoreHolder loadMoreHolder = (LoadMoreHolder) holder;\r\n            loadMoreHolder.binding.prgBar.getIndeterminateDrawable().setColorFilter(ContextCompat.getColor(context,R.color.colorPrimary), PorterDuff.Mode.SRC_IN);\r\n            loadMoreHolder.binding.prgBar.setIndeterminate(true);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return list.size();\r\n    }\r\n\r\n    public static class MyHolder extends RecyclerView.ViewHolder {\r\n        private FeedbackRowBinding binding;\r\n\r\n        public MyHolder(FeedbackRowBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public static class LoadMoreHolder extends RecyclerView.ViewHolder {\r\n        private LoadMoreRowBinding binding;\r\n\r\n        public LoadMoreHolder(LoadMoreRowBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemViewType(int position) {\r\n        if (list.get(position)==null){\r\n            return LOAD;\r\n        }else {\r\n            return DATA;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/apps/emdad/adapters/FeedbackAdapter.java	(revision f324eaf22b0ba3077fc7138cccc63de6ad38dd43)
+++ app/src/main/java/com/apps/emdad/adapters/FeedbackAdapter.java	(date 1606899728497)
@@ -101,51 +101,51 @@
                 String reason = feedbackModel.getReason();
                 switch (reason){
                     case "1":
-                        myHolder.binding.tvReason.setText("يعاكس");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.flirt));
                         myHolder.binding.tvStatus.setText(R.string.someting_dont_like);
                         break;
                     case "2":
-                        myHolder.binding.tvReason.setText("غير مهذب");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.rude));
                         myHolder.binding.tvStatus.setText(R.string.someting_dont_like);
                         break;
                     case "3":
-                        myHolder.binding.tvReason.setText("مدخن");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.smoked));
                         myHolder.binding.tvStatus.setText(R.string.someting_dont_like);
 
                         break;
                     case "4":
-                        myHolder.binding.tvReason.setText("متأخر");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.late));
                         myHolder.binding.tvStatus.setText(R.string.someting_dont_like);
 
                         break;
                     case "5":
-                        myHolder.binding.tvReason.setText("غير ملتزم بالتعليمات الصحية");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.not_adhering));
                         myHolder.binding.tvStatus.setText(R.string.someting_dont_like);
 
                         break;
                     case "6":
-                        myHolder.binding.tvReason.setText("يضايق");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.get_angry));
                         myHolder.binding.tvStatus.setText(R.string.someting_dont_like);
 
                         break;
                     case "7":
-                        myHolder.binding.tvReason.setText("خدمة سريعة");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.fast_service));
                         myHolder.binding.tvStatus.setText(R.string.something_you_like);
 
 
                         break;
                     case "8":
-                        myHolder.binding.tvReason.setText("محترم");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.respectable));
                         myHolder.binding.tvStatus.setText(R.string.something_you_like);
 
                         break;
                     case "9":
-                        myHolder.binding.tvReason.setText("إحترافي");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.professional));
                         myHolder.binding.tvStatus.setText(R.string.something_you_like);
 
                         break;
                     case "10":
-                        myHolder.binding.tvReason.setText("متجاوب");
+                        myHolder.binding.tvReason.setText(context.getString(R.string.responsive));
                         myHolder.binding.tvStatus.setText(R.string.something_you_like);
 
                         break;
Index: app/src/main/res/values-ar/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">إمداد</string>\r\n    <string name=\"map_api_key\">AIzaSyA6QI378BHt9eqBbiJKtqWHTSAZxcSwN3Q</string>\r\n    <string name=\"search_key\">AIzaSyAeyMUJgKAhnNXbILHONb1um72CNzELFRY</string>\r\n\r\n    <string name=\"field_req\">الحقل مطلوب</string>\r\n    <string name=\"login\">تسجيل دخول</string>\r\n    <string name=\"code\">الكود</string>\r\n    <string name=\"user_phone\">رقم الجوال</string>\r\n    <string name=\"are_you_have_account\">ليس لدي حساب ؟</string>\r\n    <string name=\"upload_profile_photo\">رفع صورة</string>\r\n    <string name=\"email\">البريد الالكتروني</string>\r\n    <string name=\"accept\">الموافقة</string>\r\n    <string name=\"terms_and_conditions\">الشروط والاحكام</string>\r\n    <string name=\"enter_verification_code\">ادخل كود التحقق</string>\r\n    <string name=\"confirm\">تأكيد</string>\r\n    <string name=\"share_app\">مشاركة</string>\r\n    <string name=\"rate_app\">قيم التطبيق</string>\r\n    <string name=\"logout\">خروج</string>\r\n    <string name=\"about_app\">عن التطبيق</string>\r\n    <string name=\"notifications\">الإشعارات</string>\r\n    <string name=\"wait\">انتظر</string>\r\n    <string name=\"home\">الرئيسية</string>\r\n    <string name=\"chat\">المحادثة</string>\r\n    <string name=\"profile\">الملف الشخصي</string>\r\n    <string name=\"more\">المذيد</string>\r\n    <string name=\"field_required\">الحقل مطلوب</string>\r\n    <string name=\"inv_email\">البريد الالكتروني غير صحيح</string>\r\n    <string name=\"cannot_signup\">لا يمكن انشاء حساب دون الموافقة الشروط والاحكام</string>\r\n    <string name=\"gallery\">معرض الصور</string>\r\n    <string name=\"camera\">الكاميرا</string>\r\n    <string name=\"perm_image_denied\">الوصول الى الصور مرفوض</string>\r\n    <string name=\"privacy\">سياسة الخصوصية</string>\r\n    <string name=\"upload_image\">رفع صورة</string>\r\n    <string name=\"select_image_to_upload\">إختر صورة لرفعها</string>\r\n    <string name=\"cancel\">إلغاء</string>\r\n    <string name=\"sign_up\">إنشاء حساب</string>\r\n    <string name=\"failed\">يوجد مشكلة وجار العمل عليها</string>\r\n    <string name=\"ch_skill\">إختر المهارات</string>\r\n    <string name=\"edit_profile\">تعديل الملف الشخصي</string>\r\n    <string name=\"type_a_message\">إكتب رسالتك هنا...</string>\r\n    <string name=\"please_sign_in_or_sign_up\">قم بتسجيل الدخول او انشاء حساب جديد</string>\r\n    <string name=\"ok\">أقبل</string>\r\n    <string name=\"skip\">تخطى</string>\r\n    <string name=\"just_now\">الان</string>\r\n    <string name=\"a_minute_ago\">منذ د</string>\r\n    <string name=\"min\">د</string>\r\n    <string name=\"an_hour_ago\">منذ س</string>\r\n    <string name=\"hs\">س</string>\r\n    <string name=\"yesterday\">امس</string>\r\n    <string name=\"video\">تم إرسال فيديو</string>\r\n    <string name=\"voice\">رسالة صوتية</string>\r\n    <string name=\"image\">تم إرسال صورة</string>\r\n    <string name=\"something\">تحقق من الاتصال بالانترنت</string>\r\n    <string name=\"invite\">دعوة</string>\r\n    <string name=\"back\">رجوع</string>\r\n    <string name=\"refuse\">رفض</string>\r\n    <string name=\"no_requests\">لا توجد طلبات</string>\r\n    <string name=\"req_refused\">تم رفض طلبك</string>\r\n    <string name=\"req_accepted\">تم قبول طلبك</string>\r\n    <string name=\"no_conversation\">لا توجد محادثات</string>\r\n    <string name=\"choose_language\">إختر لغتك</string>\r\n    <string name=\"next\">التالي</string>\r\n    <string name=\"welcome_in_emdad\"><![CDATA[مرحبا بك فى <font color=\"#1db198\">إمداد</font>]]></string>\r\n    <string name=\"get_all_service\"><![CDATA[تفضل واطلب من جميع انواع المتاجر <font color=\"#2e3233\">في كل مكان</font> من داخل مدينتك]]></string>\r\n    <string name=\"when_it_comes\"><![CDATA[نقدم لك  <font color=\"#2e3233\">أفضل التجارب</font> لما نجي نتكلم عن الطلبات في إمداد]]></string>\r\n    <string name=\"free_order_discussion\"><![CDATA[مو بس كدا تقدر <font color=\"#2e3233\">تتواصل</font> مع المراسيل في الطلبات دائما]]></string>\r\n\r\n\r\n    <string name=\"we_deliver_order\">نقوم بتوصيل طلبك الى موقعك او اي موقع تختارة</string>\r\n    <string name=\"get_discounts\"><![CDATA[ احصل على <font color=\"#1db198\">خصومات</font>]]></string>\r\n    <string name=\"easy_comm\"><![CDATA[سهولة <font color=\"#1db198\">التواصل</font>]]></string>\r\n    <string name=\"many_discount\">يمكنك الحصول على خصومات كثيرة من عدد كبير من المتاجر المميزة لدينا</string>\r\n    <string name=\"delegate_contact\">يمكنك التواصل دائما مع المندوب اثناء الحصول على طلبك</string>\r\n    <string name=\"start\">البدء</string>\r\n    <string name=\"phone_number\">رقم الجوال</string>\r\n    <string name=\"country_code\">كود الدولة</string>\r\n    <string name=\"code_verification\">رمز التحقق</string>\r\n    <string name=\"enter_code_sent_to\">ادخل كود التحقق المرسل الى</string>\r\n    <string name=\"resend_in\">إعادة ارسال فى </string>\r\n    <string name=\"resend\">أعد إرسال</string>\r\n    <string name=\"stores\">متاجر</string>\r\n    <string name=\"order\">طلباتي</string>\r\n    <string name=\"no_notifications_to_show\">لا توجد إشعارات لعرضها</string>\r\n    <string name=\"no_orders_to_show\">لا توجد طلبات لعرضها</string>\r\n    <string name=\"delivering\">توصيل</string>\r\n    <string name=\"ch_year\">اختر سنة الميلاد</string>\r\n    <string name=\"ch_gender\">إختر النوع</string>\r\n    <string name=\"name\">الإسم</string>\r\n    <string name=\"year_of_birth\">سنة الميلاد</string>\r\n    <string name=\"male\">ذكر</string>\r\n    <string name=\"female\">انثى</string>\r\n    <string name=\"choose_year\">إختر السنة</string>\r\n    <string name=\"ok2\">حسنا!</string>\r\n    <string name=\"how_can_i_help_you\">كيف يمكنني مساعدتك ؟</string>\r\n    <string name=\"good_morning\">صباح الخير</string>\r\n    <string name=\"good_afternoon\">مساء الخير</string>\r\n    <string name=\"show_previous_order\">عرض الطلبات السابقة</string>\r\n    <string name=\"new_order\">طلب جديد</string>\r\n    <string name=\"shop_list\">قائمة المتاجر</string>\r\n    <string name=\"location_on_map\">الموقع على الخريطة</string>\r\n    <string name=\"order_where\">تمام، من وين تريد تطلب الحين...؟</string>\r\n    <string name=\"welcome_experience\">مرحبا بك في تجربة الطلب الجديدة فى إمداد</string>\r\n    <string name=\"we_deliver_anything_city\">تقدر تطلب أي شئ من أي مكان في مدينتك</string>\r\n    <string name=\"good_place\">جميل، انت اخترت هذا المكان الآن بنجيبلك طلبك منه</string>\r\n    <string name=\"order_details\">تفاصيل الطلب</string>\r\n    <string name=\"change\">تغيير</string>\r\n    <string name=\"what_need\">ممكن تقول لنا عن تفاصيل طلبك ؟</string>\r\n    <string name=\"write_what_you_want\">ادخل تفاصيل الطلب</string>\r\n    <string name=\"choose_drop_loc\">جميل! أحتاج منك الآن تحدد الموقع الذي تريد ان تستلم الطلب فية من المندوب</string>\r\n    <string name=\"open_map\">عرض الخريطة</string>\r\n    <string name=\"drop_off_location\">موقع تسليم الشحنة</string>\r\n    <string name=\"how_pay\">ممتاز! ما هي طريقة الدفع المفضلة لديك؟</string>\r\n    <string name=\"cash\">نقدي</string>\r\n    <string name=\"add_coupon\">أضف كوبون</string>\r\n    <string name=\"don_t_have_coupon\">لا يوجد لدي كوبون خصم</string>\r\n    <string name=\"all_finished\">تفاصيل الطلب كاملة عندنا،حابب تغير أي تفاصيل في الطلب ؟</string>\r\n    <string name=\"change_order\">تعديل الطلب</string>\r\n    <string name=\"submit_order\">ارسل الطلب</string>\r\n    <string name=\"package_delivery\">توصيل طرد</string>\r\n    <string name=\"loc_pic_drop\">حاضرين وفي الخدمة! ممكن تحدد لنا مواقع الاستلام وتسليم الغرض ؟</string>\r\n    <string name=\"share_location\">مشاركة الموقع</string>\r\n    <string name=\"how_tp_pay_coupon\">ممتاز!ماهي طريقة الدفع المفضلة لديك؟</string>\r\n    <string name=\"restart\">البدء من جديد</string>\r\n    <string name=\"fetching_location\">جار تحديد موقعك...</string>\r\n    <string name=\"i_want_restaurant\">ابحث عن مطعم كوفي أو اي مكان...</string>\r\n    <string name=\"your_location_near_you\">موقعك الحالي</string>\r\n    <string name=\"results_for\">نتيجة</string>\r\n    <string name=\"filter\">إعدادات البحث</string>\r\n    <string name=\"recent_search\">بحث سابق</string>\r\n    <string name=\"clear_all\">مسح الكل</string>\r\n    <string name=\"can_t_find_any_shop_or_service_try_different_criteria\">لا يمكن العثور على أي متجر ابحث عنة فى الخريطة</string>\r\n    <string name=\"km\">كم</string>\r\n    <string name=\"category\">خدمات</string>\r\n    <string name=\"distance\">المسافة</string>\r\n    <string name=\"rating\">تصنيفات</string>\r\n    <string name=\"apply\">إستمرار</string>\r\n    <string name=\"restaurants\">مطاعم</string>\r\n    <string name=\"supermarket\">سوبرماركت</string>\r\n    <string name=\"bakery\">مخبز</string>\r\n    <string name=\"cafe\">كافيهات</string>\r\n    <string name=\"florist\">هدايا</string>\r\n    <string name=\"library\">مكتبات</string>\r\n    <string name=\"order2\">طلب</string>\r\n    <string name=\"write_here_details_order\">إكتب هنا تفاصيل طلبك من المحل مثلا:1هامبرجر بالجبنة،1 بطاطس كبير . ونرجو منك كتابة القيمة التقديرية للطلب حتى يتسنى للمندوب خدمتك.</string>\r\n    <string name=\"done\">تم</string>\r\n    <string name=\"you_can_use_coupon\">إذا عندك كوبون خصم على التوصيل ممكن تستخدمة الآن اذا احببت</string>\r\n    <string name=\"map\">خريطة</string>\r\n    <string name=\"hybrid\">هجين</string>\r\n    <string name=\"paste_google_coordination\">ضع رابط جوجل أو الاحداثيات</string>\r\n    <string name=\"confirm_drop_off\">تأكيد مكان التوصيل</string>\r\n    <string name=\"saved_location\">الاماكن المخزنة</string>\r\n    <string name=\"location_name\">الاسم</string>\r\n    <string name=\"home2\">المنزل</string>\r\n    <string name=\"work\">العمل</string>\r\n    <string name=\"save\">حفظ</string>\r\n    <string name=\"pick_up\">موقع الاستلام</string>\r\n    <string name=\"drop_off\">موقع التسليم</string>\r\n    <string name=\"change_location_current_location\">غير المكان (موقعك)</string>\r\n    <string name=\"choose_location\">تأكيد الموقع</string>\r\n    <string name=\"not_yet_chosen_location\">لم يتم اختيار الموقع بعد</string>\r\n    <string name=\"select_location_on_map\">حدد الموقع على الخريطة</string>\r\n    <string name=\"account_balance\">رصيد الحساب</string>\r\n    <string name=\"number_of_orders\">عدد الطلبات</string>\r\n    <string name=\"service_reviews\">تقييمات الخدمات</string>\r\n    <string name=\"users_feedback\">ملاحظات المستخدمين</string>\r\n    <string name=\"coupons\">الكوبونات</string>\r\n    <string name=\"settings\">إعدادات</string>\r\n    <string name=\"payment_methods\">طريقة السداد</string>\r\n    <string name=\"get_in_touch_with_us_at_telegram\">اتصل بنا على تليجرام</string>\r\n    <string name=\"enter_coupon_code\">ادخل كود الخصم هنا</string>\r\n    <string name=\"want_to_get_the_latest_coupons\">تابعنا على مواقع التواصل الاجتماعى؟</string>\r\n    <string name=\"follow_us_on\">لمعرفة آخر العروض وكوبونات الخصم</string>\r\n    <string name=\"and1\">و</string>\r\n    <string name=\"twitter\">تويتر</string>\r\n    <string name=\"instagram\">انستجرام</string>\r\n    <string name=\"facebook\">فيس بوك</string>\r\n    <string name=\"verify\">تحقق</string>\r\n    <string name=\"no_orders_found\">لا يوجد هناك طلبات</string>\r\n    <string name=\"browse_stores\">اطلع على المتاجر</string>\r\n    <string name=\"old_orders\">الطلبات السابقة</string>\r\n    <string name=\"no_old_orders_found\">لا يوجد طلبات لديك</string>\r\n    <string name=\"general_settings\">إعدادت عامة</string>\r\n    <string name=\"notification_tone\">نغمة التنبية</string>\r\n    <string name=\"default1\">افتراضي</string>\r\n    <string name=\"my_field_complaints\">قائمة الشكاوي المقدمة</string>\r\n    <string name=\"language_settings\">إعدادات اللغة</string>\r\n    <string name=\"terms_of_service\">شروط الاستخدام</string>\r\n    <string name=\"help\">مساعدة</string>\r\n    <string name=\"app_tour\">نبذة عن التطبيق</string>\r\n    <string name=\"how_to_be_come_a_delegate\">كيف أعمل فى إمداد ؟</string>\r\n    <string name=\"version_no\">رقم الاصدار:</string>\r\n    <string name=\"customers_rating\">تقييمات المستخدمين</string>\r\n    <string name=\"customer_reviews\">تقييمات العملاء</string>\r\n    <string name=\"show\">عرض الاوقات</string>\r\n    <string name=\"open_now\">مفتوح</string>\r\n    <string name=\"closed\">مغلق</string>\r\n    <string name=\"working_hours\">ساعات العمل</string>\r\n    <string name=\"work_hour_not_aval\">ساعات العمل غير متاحة</string>\r\n    <string name=\"order_canceled\">إلغاء الطلب</string>\r\n    <string name=\"invalid_url\">الرابط غير صحيح</string>\r\n    <string name=\"popular_around_you\">اشهر المواقع حولك</string>\r\n    <string name=\"most_wanted_service\">الخدمات الاكثر طلبا</string>\r\n    <string name=\"pharmacy\">صيدليات</string>\r\n    <string name=\"no_courier_available_for_this_branch\">لا يوجد مناديب لهذا الفرع</string>\r\n    <string name=\"home3\">موقعي</string>\r\n    <string name=\"order_instruction\">تعليمات الطلب</string>\r\n    <string name=\"order_here\">اطلب هنا</string>\r\n    <string name=\"attach_photo_from\">إرفاق صورة</string>\r\n    <string name=\"add_more\">إضافة المزيد</string>\r\n    <string name=\"payment_type\">طريقة الدفع</string>\r\n    <string name=\"sorry_this_branch_is_out_of_service\">نأسف هذا الفرع خارج الخدمة</string>\r\n    <string name=\"menu\">قائمة</string>\r\n    <string name=\"inv_code\">الكود غير صحيح</string>\r\n    <string name=\"phone_verification\">التحقق من رقم الجوال</string>\r\n    <string name=\"confirming_code\">جار التحقق...</string>\r\n    <string name=\"confirmed\">تم التحقق</string>\r\n    <string name=\"phone_exist\">رقم ا لجوال موجود من قبل</string>\r\n    <string name=\"email_exist\">البريد الالكتروني موجود من قبل</string>\r\n    <string name=\"delivery\">التوصيل</string>\r\n    <string name=\"stop_alerts\">اوقف التنبيهات</string>\r\n    <string name=\"receive_alert\">إستقبال التنبيهات</string>\r\n    <string name=\"your_location\">موقعك</string>\r\n    <string name=\"alerts_disabled\">التنبيهات معطلة</string>\r\n    <string name=\"there_are_orders_near_you_waiting_for_delivery\">يوجد طلبات قريبة منك بإنتظار التوصيل</string>\r\n    <string name=\"enable_alerts\">فعل التنبيهات</string>\r\n    <string name=\"so_that_submit_offers\">لكي تستطيع استقبال تنبيهات الطلبات وتقديم العروض عليها</string>\r\n    <string name=\"send\">إرسال</string>\r\n    <string name=\"total_delivery_revenue\">إجمالي رسوم التوصيل</string>\r\n    <string name=\"sar\">ر.س</string>\r\n    <string name=\"discount\">خصم</string>\r\n    <string name=\"discount_on\">على رسوم التوصيل بحد اعلى </string>\r\n    <string name=\"sat\">السبت</string>\r\n    <string name=\"sun\">الأحد</string>\r\n    <string name=\"mon\">الإثنين</string>\r\n    <string name=\"tue\">الثلاثاء</string>\r\n    <string name=\"wed\">الأربعاء</string>\r\n    <string name=\"thur\">الخميس</string>\r\n    <string name=\"fri\">الجمعة</string>\r\n    <string name=\"choose_from_menu_first\">إختر من القائمة اول</string>\r\n    <string name=\"additions\">إضافات</string>\r\n    <string name=\"add\">إضافة</string>\r\n    <string name=\"complete_order\">أكمل الطلب</string>\r\n    <string name=\"cost_with_tax\">السعر يشمل الضريبة</string>\r\n    <string name=\"order_menu\">قائمة الطلبات</string>\r\n    <string name=\"add_comment\">تفاصيل إضافية</string>\r\n    <string name=\"item_total\">المجموع</string>\r\n    <string name=\"vat\">الضريبة</string>\r\n    <string name=\"total_with_vat_included\">المجموع شاملا الضريبة المضافة</string>\r\n    <string name=\"deliver_within\">وقت التوصيل</string>\r\n    <string name=\"select_time\">إختر الوقت</string>\r\n    <string name=\"hour1\">1 ساعة</string>\r\n    <string name=\"hour2\">2 ساعات</string>\r\n    <string name=\"hour3\">3 ساعات</string>\r\n    <string name=\"day1\">1 يوم</string>\r\n    <string name=\"day2\">2 أيام</string>\r\n    <string name=\"day3\">3 أيام</string>\r\n    <string name=\"success\">تم بنجاح</string>\r\n    <string name=\"canceled\">ملغي</string>\r\n    <string name=\"pending\">قيد الانتظار</string>\r\n    <string name=\"resend_order\">إعادة الطلب</string>\r\n    <string name=\"waiting_n_offers\">في إنتظار \\n العروض...</string>\r\n    <string name=\"order_sent_wait_offers\">طلبك تم إرسالة بنجاح,سوف يقوم \\n مندوبونا بإرسال عروض التوصيل \\n بعد قليل وعليك إختيار العرض \\n الانسب لك, الطلب لن يبدأ حتى تقوم \\n بقبول احد العروض!</string>\r\n    <string name=\"inv_url\">رابط غير صحيح</string>\r\n    <string name=\"waiting_n_client\">بإنتظار \\n العميل...</string>\r\n    <string name=\"your_offer_of\">تم إرسال عرضك بقيمة </string>\r\n    <string name=\"sent_to_the_client_please_wait_until_he_accepts_your_offer_thank_you\"> للعميل الرجاء الانتظار حتى يقوم \\n بقبول عرضك وشكرا \\n</string>\r\n    <string name=\"cancel2\">سحب العرض</string>\r\n    <string name=\"ready_to_deliver_order\">انا مستعد لتوصيل الطلب</string>\r\n    <string name=\"client_reject_order\">قام العميل برفض طلب عرض \\n التوصيل الذي قدمتة بإمكانك عرض \\n توصيل آخر اذا رغبت!</string>\r\n    <string name=\"send_offer\">عرض آخر</string>\r\n    <string name=\"delivery_order\">التوصيل</string>\r\n    <string name=\"delivery_time\">وقت التوصيل</string>\r\n    <string name=\"you\">أنت</string>\r\n    <string name=\"within2\">خلال</string>\r\n    <string name=\"best_offer\">أفضل عرض</string>\r\n    <string name=\"away\">يبعد</string>\r\n    <string name=\"delivery_cost\">تكلفة التوصيل</string>\r\n    <string name=\"coming_offers\">عروض قادمة</string>\r\n    <string name=\"min_value\">حد ادنى</string>\r\n    <string name=\"max_value\">حد اقصى</string>\r\n    <string name=\"inv_offer\">عرض غير صالح</string>\r\n    <string name=\"accept2\">قبول</string>\r\n    <string name=\"offer\">عرض</string>\r\n    <string name=\"make_a_bill_for_client\">إصدر فاتورة للعميل بعد الطلب</string>\r\n    <string name=\"make_a_bill\">اصدر فاتورة</string>\r\n    <string name=\"withdraw_order\">هل فعلا تريد الإنسحاب من هذا الطلب؟</string>\r\n    <string name=\"change_driver\">هل تريد فعلا تغيير المندوب؟</string>\r\n    <string name=\"delete_order\">هل تريد فعلا حذف الطلب؟</string>\r\n    <string name=\"other_delegate_accept_order\">تم قبول الطلب من مندوب آخر</string>\r\n    <string name=\"order_canceled2\">لقد تم إلغاء الطلب</string>\r\n    <string name=\"order_accepted\">تم الموافقة على طلبك </string>\r\n    <string name=\"share\">مشاركة</string>\r\n    <string name=\"end_order\">إنهاء الطلب</string>\r\n    <string name=\"leave_order\">انسحاب من الطلب</string>\r\n    <string name=\"inv_telegram_url\">رابط تليجرام غير صحيح</string>\r\n    <string name=\"update\">تعديل</string>\r\n    <string name=\"less_offer\">عرض أقل</string>\r\n    <string name=\"add_a_bill\">إصدار فاتورة</string>\r\n    <string name=\"order_cost\">تكلفة المشتريات</string>\r\n    <string name=\"enter_order_cost\">ادخل تكلفة البضاعة</string>\r\n    <string name=\"delivery_cost_vat\">تكلفة التوصيل + ضريبة</string>\r\n    <string name=\"total_with_tax\">المجموع (يشمل الضريبة)</string>\r\n    <string name=\"attachment\">ملحق</string>\r\n    <string name=\"picking_order\">متوجة للستلام</string>\r\n    <string name=\"received\">تم الإستلام</string>\r\n    <string name=\"click_on_receive\">اضغط على تم الاستلام بمجرد استلام الطلب من المتجر</string>\r\n    <string name=\"on_location\">في الموقع</string>\r\n    <string name=\"click_on_reached_location\">إضغط على وصلت للموقع بمجرد وصولك لموقع العميل</string>\r\n    <string name=\"delivering2\">جار التوصيل</string>\r\n    <string name=\"delivered\">تم التسليم</string>\r\n    <string name=\"click_on_deliverd\">اضغط على تم التسليم بمجرد تسليم الطلب للعميل</string>\r\n    <string name=\"waiting_for_accepting_offers\">بإنتظار قبول العروض</string>\r\n    <string name=\"min15_late\">متأخر 15 دقيقة</string>\r\n    <string name=\"min30_late\">متأخر 30 دقيقة</string>\r\n    <string name=\"hour1_late\">متأخر ساعة واحدة</string>\r\n    <string name=\"hour2_late\">متأخر 2 ساعة</string>\r\n    <string name=\"hour3_late\">متأخر 3 ساعة</string>\r\n    <string name=\"day1_late\">متأخر يوم واحد</string>\r\n    <string name=\"day2_late\">متأخر 2 يوم</string>\r\n    <string name=\"day3_late\">متأخر 3 يوم</string>\r\n    <string name=\"more_days3_late\">متأخر اكثر من 3 يوم</string>\r\n    <string name=\"min5_late\">متأخر 5 دقائق</string>\r\n    <string name=\"how_was_your_experience\">كيف كانت تجربتك؟</string>\r\n    <string name=\"write_your_opinion_here\">إكتب رأيك هنا</string>\r\n    <string name=\"rate_first\">قيم اولا</string>\r\n    <string name=\"not_now\">ليس الان</string>\r\n    <string name=\"inv_coupon\">هذا الكوبون غير صالح</string>\r\n    <string name=\"you_got\">لقد حصلت على</string>\r\n    <string name=\"on_delivery\">على قيمة التوصيل</string>\r\n    <string name=\"no_feedback_to_show\">لايوجد ملاحظات لعرضها</string>\r\n    <string name=\"someting_dont_like\">حصل شي ما حبيتة؟</string>\r\n    <string name=\"something_you_like\">وش اللى حبيت اكثر شئ؟</string>\r\n    <string name=\"comments\">التعليقات</string>\r\n    <string name=\"change_location\">تغيير موقعك</string>\r\n    <string name=\"no_courier\">لا يوجد مناديب متاحين لهذاالفرع</string>\r\n    <string name=\"can_order\">تستطيع طلب طلبك من خلال تطبيق إمداد</string>\r\n    <string name=\"ch_bill\">إختر صورة الفاتورة</string>\r\n    <string name=\"delete\">مسح</string>\r\n    <string name=\"accept_terms\">لا يمكنك التسجيل دون الموافقة على الشروط والأحكام</string>\r\n\r\n</resources>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-ar/strings.xml	(revision f324eaf22b0ba3077fc7138cccc63de6ad38dd43)
+++ app/src/main/res/values-ar/strings.xml	(date 1606899728506)
@@ -338,5 +338,26 @@
     <string name="ch_bill">إختر صورة الفاتورة</string>
     <string name="delete">مسح</string>
     <string name="accept_terms">لا يمكنك التسجيل دون الموافقة على الشروط والأحكام</string>
+    <string name="shop_location_remote">موقع المتجر بعيد</string>
+    <string name="I_do_not_wish_deliver_order">لا أرغب في توصيل الطلب</string>
+    <string name="the_request_dosnot_answer">الطلب متأخر والمندوب لا يجيب</string>
+    <string name="delegate_requested_communication_outside_application">المندوب طلب التواصل خارج التطبيق</string>
+    <string name="delegate_isnot_serious">المندوب غير جاد</string>
+    <string name="delegate_requet_cancel">المندوب طلب الإلغاء</string>
+    <string name="delegate_refuse_online_payment">المندوب لايقبل الدفع الالكتروني</string>
+    <string name="change_delegate">تغيير المندوب</string>
+    <string name="no_need_order">لم اعد احتاج الطلب</string>
+    <string name="another_reason">سبب آخر</string>
+    <string name="delv_is_high">سعر التوصيل مرتفع</string>
+    <string name="flirt">يغازل</string>
+    <string name="rude">غير مهذب</string>
+    <string name="smoked">مدخن</string>
+    <string name="late">متأخر</string>
+    <string name="not_adhering">غير ملتزم بالتعليمات الصحية</string>
+    <string name="get_angry">يضايق</string>
+    <string name="fast_service">خدمة سريعة</string>
+    <string name="respectable">محترم</string>
+    <string name="professional">إحترافي</string>
+    <string name="responsive">متجاوب</string>
 
 </resources>
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Emdad</string>\r\n    <string name=\"map_api_key\">AIzaSyA6QI378BHt9eqBbiJKtqWHTSAZxcSwN3Q</string>\r\n    <string name=\"search_key\">AIzaSyAeyMUJgKAhnNXbILHONb1um72CNzELFRY</string>\r\n    <string name=\"field_req\">Field required</string>\r\n    <string name=\"login\">Login</string>\r\n    <string name=\"code\">Code</string>\r\n    <string name=\"user_phone\">User Phone</string>\r\n    <string name=\"are_you_have_account\">Are You Have Account ?</string>\r\n    <string name=\"upload_profile_photo\">Upload Profile Photo</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"accept\">Accept</string>\r\n    <string name=\"terms_and_conditions\">Terms And Conditions</string>\r\n    <string name=\"enter_verification_code\">Enter Verification Code</string>\r\n    <string name=\"confirm\">Confirm</string>\r\n    <string name=\"share_app\">Share App</string>\r\n    <string name=\"rate_app\">Rate this App</string>\r\n    <string name=\"logout\">Logout</string>\r\n    <string name=\"about_app\">About App</string>\r\n    <string name=\"notifications\">Notifications</string>\r\n    <string name=\"wait\">Wait</string>\r\n    <string name=\"home\">Home</string>\r\n    <string name=\"chat\">Chat</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"more\">More</string>\r\n    <string name=\"field_required\">Field Required</string>\r\n    <string name=\"inv_email\">Invalid Email</string>\r\n    <string name=\"cannot_signup\">Can Not Signup Without Accept Terms And Conditions</string>\r\n    <string name=\"gallery\">Gallery</string>\r\n    <string name=\"camera\">Camera</string>\r\n    <string name=\"perm_image_denied\">Permission image denied</string>\r\n    <string name=\"privacy\">Privacy Policy</string>\r\n    <string name=\"upload_image\">Upload image</string>\r\n    <string name=\"select_image_to_upload\">Select Image to Upload</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"sign_up\">Sign Up</string>\r\n    <string name=\"failed\">Failed</string>\r\n    <string name=\"edit_profile\">Edit Profile</string>\r\n    <string name=\"ch_skill\">Choose Skills</string>\r\n    <string name=\"type_a_message\">Type a message...</string>\r\n    <string name=\"please_sign_in_or_sign_up\">Please sign In or Sign Up</string>\r\n    <string name=\"ok\">Ok</string>\r\n    <string name=\"skip\">Skip</string>\r\n    <string name=\"just_now\">Just Now</string>\r\n    <string name=\"a_minute_ago\">a min ago</string>\r\n    <string name=\"min\">min</string>\r\n    <string name=\"an_hour_ago\">an hour ago</string>\r\n    <string name=\"hs\">h</string>\r\n    <string name=\"yesterday\">yesterday</string>\r\n    <string name=\"video\">Sent video message</string>\r\n    <string name=\"voice\">Sent voice message</string>\r\n    <string name=\"image\">Sent image</string>\r\n    <string name=\"something\">Check internet connection</string>\r\n    <string name=\"invite\">Invite</string>\r\n    <string name=\"back\">Back</string>\r\n    <string name=\"refuse\">Refuse</string>\r\n    <string name=\"no_requests\">No requests</string>\r\n    <string name=\"req_refused\">Your request refused</string>\r\n    <string name=\"req_accepted\">Your request accepted</string>\r\n    <string name=\"no_conversation\">No conversation</string>\r\n    <string name=\"choose_language\">Choose Language</string>\r\n    <string name=\"next\">next</string>\r\n    <string name=\"welcome_in_emdad\"><![CDATA[Welcome in <font color=\"#1db198\">Emdad</font>]]></string>\r\n    <string name=\"get_all_service\"><![CDATA[Get all kinds of Services for <font color=\"#2e3233\">anywhere</font>in your city]]></string>\r\n    <string name=\"when_it_comes\"><![CDATA[When it comes to ordering we has the <font color=\"#2e3233\">best experience</font>]]></string>\r\n    <string name=\"free_order_discussion\"><![CDATA[Free order discussion with the couriers <font color=\"#2e3233\">all the time</font>]]></string>\r\n\r\n    <string name=\"we_deliver_order\">We deliver your order to your site or wherever you choose</string>\r\n    <string name=\"get_discounts\"><![CDATA[Get <font color=\"#1db198\">discounts</font>]]></string>\r\n    <string name=\"easy_comm\"><![CDATA[Easy <font color=\"#1db198\">Communication</font>]]></string>\r\n    <string name=\"many_discount\">You can get many discounts from a large number of our exclusive stores</string>\r\n    <string name=\"delegate_contact\">You can always contact the delegate while getting your order</string>\r\n    <string name=\"start\">Start</string>\r\n    <string name=\"phone_number\">Phone number</string>\r\n    <string name=\"country_code\">Country code</string>\r\n    <string name=\"code_verification\">Code verification</string>\r\n    <string name=\"enter_code_sent_to\">Enter code sent to</string>\r\n    <string name=\"resend_in\">Resend in</string>\r\n    <string name=\"resend\">Resend</string>\r\n    <string name=\"stores\">Stores</string>\r\n    <string name=\"order\">Order</string>\r\n    <string name=\"no_notifications_to_show\">No notifications to show</string>\r\n    <string name=\"no_orders_to_show\">No orders to show</string>\r\n    <string name=\"delivering\">Delivering</string>\r\n    <string name=\"ch_year\">Choose year of birth</string>\r\n    <string name=\"ch_gender\">Choose gender</string>\r\n    <string name=\"name\">Name</string>\r\n    <string name=\"year_of_birth\">Year of birth</string>\r\n    <string name=\"male\">Male</string>\r\n    <string name=\"female\">Female</string>\r\n    <string name=\"choose_year\">Choose year</string>\r\n    <string name=\"ok2\">OK</string>\r\n    <string name=\"how_can_i_help_you\">How can i help you ?</string>\r\n    <string name=\"good_morning\">Good morning</string>\r\n    <string name=\"good_afternoon\">Good afternoon</string>\r\n    <string name=\"show_previous_order\">Show previous orders</string>\r\n    <string name=\"new_order\">New order</string>\r\n    <string name=\"shop_list\">Shop list</string>\r\n    <string name=\"location_on_map\">Location on map</string>\r\n    <string name=\"order_where\">Okay so where do you want to make you order from...?</string>\r\n    <string name=\"welcome_experience\">Welcome to our new ordering Experience</string>\r\n    <string name=\"we_deliver_anything_city\">We deliver anything, from anywhere within your city</string>\r\n    <string name=\"good_place\">Good, you picked this place to get your order from</string>\r\n    <string name=\"order_details\">Order details</string>\r\n    <string name=\"change\">Change</string>\r\n    <string name=\"what_need\">What do you need from there ?</string>\r\n    <string name=\"write_what_you_want\">Write what you want</string>\r\n    <string name=\"choose_drop_loc\">Now i need the drop off location that you want us to deliver to it</string>\r\n    <string name=\"open_map\">Open map</string>\r\n    <string name=\"drop_off_location\">Drop off Location</string>\r\n    <string name=\"how_pay\">Okay, how do you want to pay for this order</string>\r\n    <string name=\"cash\">Cash</string>\r\n    <string name=\"add_coupon\">Add coupon</string>\r\n    <string name=\"don_t_have_coupon\">Don\\'t have coupon</string>\r\n    <string name=\"all_finished\">All finished and your order is ready, is there anything you want to change</string>\r\n    <string name=\"change_order\">Change order</string>\r\n    <string name=\"submit_order\">Submit order</string>\r\n    <string name=\"package_delivery\">Package delivery</string>\r\n    <string name=\"loc_pic_drop\">Sure, Share with us the location of the Pick up and Drop off</string>\r\n    <string name=\"share_location\">Share location</string>\r\n    <string name=\"how_tp_pay_coupon\">Okay, how do you want to pay for this order</string>\r\n    <string name=\"restart\">Restart</string>\r\n    <string name=\"fetching_location\">Fetching location...</string>\r\n    <string name=\"i_want_restaurant\">I want restaurant,location,coffee...</string>\r\n    <string name=\"your_location_near_you\">Your location (near you)</string>\r\n    <string name=\"results_for\">Results for</string>\r\n    <string name=\"filter\">Filter</string>\r\n    <string name=\"recent_search\">Recent Search</string>\r\n    <string name=\"clear_all\">Clear All</string>\r\n    <string name=\"can_t_find_any_shop_or_service_try_different_criteria\">Can\\'t find any shop or service, try different criteria</string>\r\n    <string name=\"km\">km</string>\r\n    <string name=\"category\">Category</string>\r\n    <string name=\"distance\">Distance</string>\r\n    <string name=\"rating\">Rating</string>\r\n    <string name=\"apply\">Apply</string>\r\n    <string name=\"restaurants\">Restaurants</string>\r\n    <string name=\"supermarket\">Supermarket</string>\r\n    <string name=\"bakery\">Bakery</string>\r\n    <string name=\"cafe\">Cafe</string>\r\n    <string name=\"florist\">Florist</string>\r\n    <string name=\"library\">Library</string>\r\n    <string name=\"order2\">Order</string>\r\n    <string name=\"write_here_details_order\">Write here the details of your order,for example: i want 1 Cheeseburger,1 Large Fries,Please write also how much is the approximate cost of your order.</string>\r\n    <string name=\"done\">Done</string>\r\n    <string name=\"you_can_use_coupon\">Okay, you can use coupons to pay for the delivery of the order</string>\r\n    <string name=\"map\">Map</string>\r\n    <string name=\"hybrid\">Hybrid</string>\r\n    <string name=\"paste_google_coordination\">Paste google map URL or coordination</string>\r\n    <string name=\"confirm_drop_off\">Confirm drop off</string>\r\n    <string name=\"saved_location\">Saved location</string>\r\n    <string name=\"location_name\">Location name</string>\r\n    <string name=\"home2\">Home</string>\r\n    <string name=\"work\">Work</string>\r\n    <string name=\"save\">Save</string>\r\n    <string name=\"pick_up\">Pick Up</string>\r\n    <string name=\"drop_off\">Drop off</string>\r\n    <string name=\"change_location_current_location\">Change location (Current location)</string>\r\n    <string name=\"choose_location\">Choose location</string>\r\n    <string name=\"not_yet_chosen_location\">Not yet chosen location</string>\r\n    <string name=\"select_location_on_map\">Select location on map</string>\r\n    <string name=\"account_balance\">Account Balance</string>\r\n    <string name=\"number_of_orders\">Number of Orders</string>\r\n    <string name=\"service_reviews\">Service Reviews</string>\r\n    <string name=\"users_feedback\">Users Feedback</string>\r\n    <string name=\"coupons\">Coupons</string>\r\n    <string name=\"settings\">Settings</string>\r\n    <string name=\"payment_methods\">Payment Methods</string>\r\n    <string name=\"get_in_touch_with_us_at_telegram\">Get in touch with us at Telegram</string>\r\n    <string name=\"enter_coupon_code\">ENTER COUPON CODE...</string>\r\n    <string name=\"want_to_get_the_latest_coupons\">Want to get the latest coupons?</string>\r\n    <string name=\"follow_us_on\">follow us on</string>\r\n    <string name=\"and1\">and</string>\r\n    <string name=\"twitter\">Twitter</string>\r\n    <string name=\"instagram\">Instagram</string>\r\n    <string name=\"facebook\">Facebook</string>\r\n    <string name=\"verify\">Verify</string>\r\n    <string name=\"no_orders_found\">No Orders Found</string>\r\n    <string name=\"browse_stores\">Browse Stores</string>\r\n    <string name=\"old_orders\">Old Orders</string>\r\n    <string name=\"no_old_orders_found\">No Old Orders Found</string>\r\n    <string name=\"general_settings\">General settings</string>\r\n    <string name=\"notification_tone\">Notification Tone</string>\r\n    <string name=\"default1\">Default</string>\r\n    <string name=\"my_field_complaints\">My Field Complaints</string>\r\n    <string name=\"language_settings\">Language Settings</string>\r\n    <string name=\"terms_of_service\">Terms of Service</string>\r\n    <string name=\"help\">Help</string>\r\n    <string name=\"app_tour\">App Tour</string>\r\n    <string name=\"how_to_be_come_a_delegate\">How to be come a DELEGATE</string>\r\n    <string name=\"version_no\">Version No:</string>\r\n    <string name=\"customers_rating\">Customers Rating</string>\r\n    <string name=\"customer_reviews\">Customer Reviews</string>\r\n    <string name=\"show\">Show</string>\r\n    <string name=\"open_now\">Open Now</string>\r\n    <string name=\"closed\">Closed</string>\r\n    <string name=\"working_hours\">Working Hours</string>\r\n    <string name=\"work_hour_not_aval\">Working Hours Not Available</string>\r\n    <string name=\"order_canceled\">Order canceled</string>\r\n    <string name=\"invalid_url\">Invalid URL</string>\r\n    <string name=\"popular_around_you\">Popular around you</string>\r\n    <string name=\"most_wanted_service\">Most wanted service</string>\r\n    <string name=\"pharmacy\">Pharmacy</string>\r\n    <string name=\"no_courier_available_for_this_branch\">No Courier available for this branch</string>\r\n    <string name=\"home3\">Home</string>\r\n    <string name=\"order_instruction\">Order Instruction</string>\r\n    <string name=\"order_here\">Order here</string>\r\n    <string name=\"attach_photo_from\">Attach Photo From</string>\r\n    <string name=\"add_more\">Add more</string>\r\n    <string name=\"payment_type\">Payment Type</string>\r\n    <string name=\"sorry_this_branch_is_out_of_service\">Sorry, This branch is out of service</string>\r\n    <string name=\"menu\">Menu</string>\r\n    <string name=\"inv_code\">invalid code</string>\r\n    <string name=\"phone_verification\">Phone Verification</string>\r\n    <string name=\"confirming_code\">Confirming code...</string>\r\n    <string name=\"confirmed\">Confirmed</string>\r\n    <string name=\"phone_exist\">Phone number exists</string>\r\n    <string name=\"email_exist\">Email exists</string>\r\n    <string name=\"delivery\">Delivery</string>\r\n    <string name=\"stop_alerts\">Disable Alerts</string>\r\n    <string name=\"receive_alert\">Receive Alert</string>\r\n    <string name=\"your_location\">Your Location</string>\r\n    <string name=\"alerts_disabled\">Alerts Disabled</string>\r\n    <string name=\"there_are_orders_near_you_waiting_for_delivery\">There are orders near you waiting for delivery</string>\r\n    <string name=\"enable_alerts\">Enable Alerts</string>\r\n    <string name=\"so_that_submit_offers\">So that you can receive orders alerts and submit offers</string>\r\n    <string name=\"send\">Send</string>\r\n    <string name=\"total_delivery_revenue\">Total Delivery Revenue</string>\r\n    <string name=\"sar\">SAR</string>\r\n    <string name=\"discount\">Discount</string>\r\n    <string name=\"discount_on\">on delivery fees, with a maximum of</string>\r\n    <string name=\"sat\">Saturday</string>\r\n    <string name=\"sun\">Sunday</string>\r\n    <string name=\"mon\">Monday</string>\r\n    <string name=\"tue\">Tuesday</string>\r\n    <string name=\"wed\">Wednesday</string>\r\n    <string name=\"thur\">Thursday</string>\r\n    <string name=\"fri\">Friday</string>\r\n    <string name=\"choose_from_menu_first\">Choose From Menu First</string>\r\n    <string name=\"additions\">Additions</string>\r\n    <string name=\"add\">Add</string>\r\n    <string name=\"complete_order\">Place Order</string>\r\n    <string name=\"cost_with_tax\">Cost with VAT </string>\r\n    <string name=\"order_menu\">ITEMS</string>\r\n    <string name=\"add_comment\">Add Comment</string>\r\n    <string name=\"item_total\">Item total</string>\r\n    <string name=\"vat\">VAT</string>\r\n    <string name=\"total_with_vat_included\">Total with VAT included</string>\r\n    <string name=\"deliver_within\">Deliver within</string>\r\n    <string name=\"select_time\">Select Time</string>\r\n\r\n    <string name=\"hour1\">1 Hour</string>\r\n    <string name=\"hour2\">2 Hours</string>\r\n    <string name=\"hour3\">3 Hours</string>\r\n    <string name=\"day1\">1 Day</string>\r\n    <string name=\"day2\">2 Days</string>\r\n    <string name=\"day3\">3 Days</string>\r\n    <string name=\"success\">Success!</string>\r\n    <string name=\"canceled\">Canceled</string>\r\n    <string name=\"pending\">Pending</string>\r\n    <string name=\"resend_order\">Resend Order</string>\r\n    <string name=\"waiting_n_offers\">Waiting \\n offers...</string>\r\n    <string name=\"order_sent_wait_offers\">Your order successfully sent,our Courier \\n will send the delivery offers shortly \\n and you have to choose the offer \\n that best suits you. \\n The request will not start \\n until you accept one of the offers!</string>\r\n    <string name=\"inv_url\">Invalid URL</string>\r\n    <string name=\"waiting_n_client\">Waiting \\n client...</string>\r\n    <string name=\"your_offer_of\">Your offer of</string>\r\n    <string name=\"sent_to_the_client_please_wait_until_he_accepts_your_offer_thank_you\">sent to the client \\n Please wait until  he accepts \\n your offer Thank you</string>\r\n    <string name=\"cancel2\">Cancel</string>\r\n    <string name=\"ready_to_deliver_order\">Ready to deliver order</string>\r\n    <string name=\"client_reject_order\">The Client rejected your delivery \\n offer request . You can offer\\n another delivery \\n if you wish!</string>\r\n    <string name=\"send_offer\">Send Offer</string>\r\n    <string name=\"delivery_order\">Delivery Order</string>\r\n    <string name=\"delivery_time\">Delivery Time</string>\r\n    <string name=\"you\">You</string>\r\n    <string name=\"within2\">Within</string>\r\n    <string name=\"best_offer\">Best Offer</string>\r\n    <string name=\"away\">Away</string>\r\n    <string name=\"delivery_cost\">Delivery Cost</string>\r\n    <string name=\"coming_offers\">Coming Offers</string>\r\n    <string name=\"min_value\">Min value</string>\r\n    <string name=\"max_value\">Max value</string>\r\n    <string name=\"inv_offer\">Invalid offer</string>\r\n    <string name=\"accept2\">Accept</string>\r\n    <string name=\"offer\">Offer</string>\r\n    <string name=\"make_a_bill_for_client\">Make a bill for client</string>\r\n    <string name=\"make_a_bill\">Make A Bill</string>\r\n    <string name=\"withdraw_order\">Withdraw from this order?</string>\r\n    <string name=\"change_driver\">Change driver?</string>\r\n    <string name=\"delete_order\">Delete order?</string>\r\n    <string name=\"other_delegate_accept_order\">Other delegate accept order</string>\r\n    <string name=\"order_canceled2\">Order canceled</string>\r\n    <string name=\"order_accepted\">Order accepted</string>\r\n    <string name=\"share\">Share</string>\r\n    <string name=\"end_order\">End Order</string>\r\n    <string name=\"leave_order\">Leave order</string>\r\n    <string name=\"inv_telegram_url\">Invalid Telegram URL</string>\r\n    <string name=\"update\">Update</string>\r\n    <string name=\"less_offer\">Less offer</string>\r\n    <string name=\"add_a_bill\">Add a bill</string>\r\n    <string name=\"order_cost\">Order Cost</string>\r\n    <string name=\"enter_order_cost\">Enter order cost</string>\r\n    <string name=\"delivery_cost_vat\">Delivery cost + VAT</string>\r\n    <string name=\"total_with_tax\">Total with tax</string>\r\n    <string name=\"attachment\">Attachment</string>\r\n    <string name=\"picking_order\">Picking Order</string>\r\n    <string name=\"received\">Received</string>\r\n    <string name=\"click_on_receive\">Click on Received when received order from shop</string>\r\n    <string name=\"on_location\">On location</string>\r\n    <string name=\"click_on_reached_location\">Click Reached to location when get to client\\'s location</string>\r\n    <string name=\"delivering2\">Delivering</string>\r\n    <string name=\"delivered\">Delivered</string>\r\n    <string name=\"click_on_deliverd\">Click on Delivered when the order is delivered to the client</string>\r\n    <string name=\"waiting_for_accepting_offers\">Waiting for accepting offers</string>\r\n    <string name=\"min15_late\">15 minutes late</string>\r\n    <string name=\"min30_late\">30 minutes late</string>\r\n    <string name=\"hour1_late\">1 hour late</string>\r\n    <string name=\"hour2_late\">2 hours late</string>\r\n    <string name=\"hour3_late\">3 hours late</string>\r\n    <string name=\"day1_late\">1 day late</string>\r\n    <string name=\"day2_late\">2 days late</string>\r\n    <string name=\"day3_late\">3 days late</string>\r\n    <string name=\"more_days3_late\">more than 3 days late</string>\r\n    <string name=\"min5_late\">5 minutes late</string>\r\n    <string name=\"how_was_your_experience\">How was your experience?</string>\r\n    <string name=\"write_your_opinion_here\">Write your opinion here</string>\r\n    <string name=\"rate_first\">Rate first</string>\r\n    <string name=\"not_now\">Not now</string>\r\n    <string name=\"inv_coupon\">Invalid Coupon</string>\r\n    <string name=\"you_got\">You got</string>\r\n    <string name=\"on_delivery\">on delivery</string>\r\n    <string name=\"no_feedback_to_show\">No feedback to show</string>\r\n    <string name=\"someting_dont_like\">Something don\\'t like happened?</string>\r\n    <string name=\"something_you_like\">Something you like more?</string>\r\n    <string name=\"comments\">Comments</string>\r\n    <string name=\"change_location\">Change Location</string>\r\n    <string name=\"no_courier\">No Courier Available</string>\r\n    <string name=\"can_order\">You can order any order from stores through Emdad Application</string>\r\n    <string name=\"ch_bill\">Choose Bill image</string>\r\n    <string name=\"delete\">Delete</string>\r\n    <string name=\"accept_terms\">Accept terms and conditions</string>\r\n\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision f324eaf22b0ba3077fc7138cccc63de6ad38dd43)
+++ app/src/main/res/values/strings.xml	(date 1606899728512)
@@ -337,6 +337,27 @@
     <string name="ch_bill">Choose Bill image</string>
     <string name="delete">Delete</string>
     <string name="accept_terms">Accept terms and conditions</string>
+    <string name="shop_location_remote">Shop location is remote</string>
+    <string name="I_do_not_wish_deliver_order">I do not wish to deliver the order</string>
+    <string name="the_request_dosnot_answer">The request is late and the delegate does not answer</string>
+    <string name="delegate_requested_communication_outside_application">The delegate requested communication outside the application</string>
+    <string name="delegate_isnot_serious">The delegate is not serious</string>
+    <string name="delegate_requet_cancel">The delegate request cancellation</string>
+    <string name="delegate_refuse_online_payment">The delegate did not accept online payment</string>
+    <string name="change_delegate">Change the delegate</string>
+    <string name="no_need_order">I no longer need the order</string>
+    <string name="another_reason">Another reason</string>
+    <string name="delv_is_high">The delivery price is high</string>
+    <string name="flirt">Flirt</string>
+    <string name="rude">Rude</string>
+    <string name="smoked">Smoked</string>
+    <string name="late">Late</string>
+    <string name="not_adhering">Not adhering to health instructions</string>
+    <string name="get_angry">Get angry</string>
+    <string name="fast_service">Fast Service</string>
+    <string name="respectable">Respectable</string>
+    <string name="professional">Professional</string>
+    <string name="responsive">Responsive</string>
 
 
 </resources>
\ No newline at end of file
Index: app/src/main/res/layout/load_more.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/load_more.xml	(date 1605515288735)
+++ app/src/main/res/layout/load_more.xml	(date 1605515288735)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    >
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="45dp">
+        <ProgressBar
+            android:id="@+id/progBar"
+            android:layout_width="35dp"
+            android:layout_height="35dp"
+            android:layout_gravity="center"
+            />
+    </FrameLayout>
+</layout>
+
